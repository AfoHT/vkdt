#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

// global uniform stuff about image and roi
layout(std140, set = 0, binding = 0) uniform params_t
{
  roi_t ri;
  roi_t ro;
  vec4 black;  // black point
  vec4 mul;    // multiplier = pow(2.0f, ev) * wb/(white-black)
} params;


layout( // input f32 buffer rgb
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // output f32 buffer rgb
    set = 1, binding = 1, rgba32f
) uniform image2D img_out;

// exposure
void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, params.ro.roi))) return;

  vec4 rgba = (texelFetch(img_in, ipos, 0) - params.black) * params.mul;
  // XXX TODO: real highlight reconstruction:
  // rgba = clamp(rgba, vec4(0.), vec4(1.0));
  // hardcoded colour matrix for random camera:
  // mat3 cm = (mat3(
  //     1141, -205, 88,
  //      -52, 1229, -154,
  //       70, -225, 1179
  //     )*1.0/1024.0);
  // imageStore(img_out, ipos, vec4(rgba.rgb * cm, 1));
  imageStore(img_out, ipos, vec4(rgba.rgb, 1));
}

