#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable
// #extension GL_AMD_gpu_shader_half_float   : enable

#include "shared.glsl"

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

// global uniform stuff about image and roi
layout(std140, set = 0, binding = 0) uniform params_t
{
  roi_t ri;
  roi_t ro;
  vec4 black;  // black point
  vec4 mul;    // multiplier = pow(2.0f, ev) * wb/(white-black)
  // float m[9];
  mat3 cam_to_rec2020;
} params;


layout( // input f16 buffer rgb
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // output f16 buffer rgb
    set = 1, binding = 1
) uniform writeonly image2D img_out;

float
kernel(vec3 ci, vec3 p)
{
  float r2 = dot(ci-p, ci-p);
  return r2 * log(max(1e-8, r2));
}

vec3
apply_lut(vec3 ci)
{
  // TODO: get from uniforms:
  // polynomial/matrix part of the lut
  // this would be xyz to ap1:
  // mat3 XYZ_2_AP1_MAT = mat3(
  //    1.6410233797, -0.3248032942, -0.2364246952,
  //   -0.6636628587,  1.6153315917,  0.0167563477,
  //    0.0117218943, -0.0082844420,  0.9883948585
  // );
  mat3 M = mat3(
      1141, -205,   88,
       -52, 1229, -154,
        70, -225, 1179
      )*1.0/1024.0;
  int cnt = 49; // TODO: get from uniform
  vec3 co = M * ci;
  for(int i=0;i<cnt;i++)
  {
    vec3 node_w = vec3(i, i+1, i+2); // TODO: get from uniform
    vec3 node_col = vec3(2*i, 3*i, 7*i);
    co += node_w * kernel(ci, node_col);
  }
  return co;
}

// exposure
void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, params.ro.roi))) return;

  vec4 rgba = (texelFetch(img_in, ipos, 0) - params.black) * params.mul;
  // f16vec4 rgba = (f16vec4(texelFetch(img_in, ipos, 0)) - float16_t(params.black)) * float16_t(params.mul);
  rgba.rgb = rgba.rgb * params.cam_to_rec2020;
  imageStore(img_out, ipos, vec4(rgba.rgb, 1));
}

