#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 1) uniform params_t
{
  vec4 x;
  vec4 y;
  vec4 m;
  float black;
} params;

layout( // input f16 buffer rgba
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // output f16 buffer rgba
    set = 1, binding = 1
) uniform writeonly image2D img_out;

// TODO: move to header?
// cubic hermite for four nodes
float
hermite4(float v)
{
  vec2 x = params.x.xy;
  vec2 y = params.y.xy;
  vec2 m = params.m.xy;
  // linear extension if outside [0,1]
  if(v < params.x.x)
    return params.y.x + (v - params.x.x) * params.m.x;
  if(v > params.x.w)
    return params.y.w + (v - params.x.w) * params.m.w;

  if(v > params.x.z)
  {
    x = params.x.zw;
    y = params.y.zw;
    m = params.m.zw;
  }
  else if(v > params.x.y)
  {
    x = params.x.yz;
    y = params.y.yz;
    m = params.m.yz;
  }
  float h = x.y - x.x;
  float t = (v - x.x)/h;
  float t2 = t * t;
  float t3 = t * t2;
  float h00 =  2.0 * t3 - 3.0 * t2 + 1.0;
  float h10 =  1.0 * t3 - 2.0 * t2 + t;
  float h01 = -2.0 * t3 + 3.0 * t2;
  float h11 =  1.0 * t3 - 1.0 * t2;
  return h00 * y.x + h10 * h * m.x + h01 * y.y + h11 * h * m.y;
}

// ACEScc as specified in S-2014-003
float
acescc(float v)
{
  if(v <= 0.0)
    return (log2(.00001526) + 9.72)/17.52;
  else if(v < .0000305175) // 2^-15
    return (log2(.00001526 + .5*v) + 9.72)/17.52;
  else
    return (log2(v) + 9.72)/17.52;
}

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  vec3 rgb = texelFetch(img_in, ipos, 0).rgb;


  const float black_ev = params.black;
  const float black = exp2(black_ev);
  float white = 1.0f+black;
  float den = log2(white)-black_ev;
#if 0 // luminance
  // avoid negative luma due to noise or extreme colour saturation:
  const float l0 = max(luminance_rec2020(rgb), 1e-10);
  // float l0 = acescc(l1);
  float l1 = hermite4((log2(l0+black)-black_ev)/den);
  // colour reconstruction: keep rgb saturation ratio same as before
  rgb *= l1/l0;
#else // rgb
  rgb = max(vec3(0.0), rgb); // the log transform blows up for negative values
  rgb = mix( // positive will be extended if > 1.0:
      ((log2(rgb+black)-black_ev)/den),
      1.0/(log(2) * den * (black+1.0)) // slope at 1.0
      * (rgb - 1.0) + 1.0,
      greaterThanEqual(rgb, vec3(1.0)));
#endif

#if 0 // DEBUG: visualise curve TODO: tie to parameter
  float off = 0.1 * imageSize(img_out).x;
  float x = (ipos.x - off)/ float(imageSize(img_out).x - 2*off);
  float y = (log2(x+black)-black_ev)/den;
  float s = 1.0/(log(2) * den * (black+1.0)); // slope of extension at 1.0
  y = mix(y, s * (x-1.0) + 1.0, y >= 1.0); // extend past 1.0
  y = hermite4(y);
  if(abs((1.1-y) * (0.8) * imageSize(img_out).y - ipos.y) < 10)
    rgb = vec3(1, 0, 1);
#endif

  // want to see why 8-bit output sucks? try this:
  // float l1 = hermite4(ipos.x / float(imageSize(img_out).x));
  // rgba.rgb = vec3(l1);
  imageStore(img_out, ipos, vec4(rgb, 1));
}

