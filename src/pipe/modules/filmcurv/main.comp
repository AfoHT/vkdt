#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

// global uniform stuff about image and roi
layout(std140, set = 0, binding = 0) uniform params_t
{
  roi_t ri;
  roi_t ro;
  vec4 x;
  vec4 y;
  vec4 m;
  float black;
} params;

layout( // input f32 buffer rgb
    set = 1, binding = 0
) uniform sampler2D img_in;

// extra input buffer: luminance of blurred image
layout( // input f32 buffer y
    set = 1, binding = 1
) uniform sampler2D img_lum;

layout( // output f32 buffer rgb
    set = 1, binding = 2, rgba32f
) uniform image2D img_out;

// TODO: move to header?
// cubic hermite for four nodes
float
hermite4(float v)
{
  vec2 x = params.x.xy;
  vec2 y = params.y.xy;
  vec2 m = params.m.xy;
  // linear extension if outside [0,1]
  if(v < params.x.x)
    return params.y.x + (v - params.x.x) * params.m.x;
  if(v > params.x.w)
    return params.y.w + (v - params.x.w) * params.m.w;

  if(v > params.x.z)
  {
    x = params.x.zw;
    y = params.y.zw;
    m = params.m.zw;
  }
  else if(v > params.x.y)
  {
    x = params.x.yz;
    y = params.y.yz;
    m = params.m.yz;
  }
  float h = x.y - x.x;
  float t = (v - x.x)/h;
  float t2 = t * t;
  float t3 = t * t2;
  float h00 =  2.0 * t3 - 3.0 * t2 + 1.0;
  float h10 =  1.0 * t3 - 2.0 * t2 + t;
  float h01 = -2.0 * t3 + 3.0 * t2;
  float h11 =  1.0 * t3 - 1.0 * t2;
  return h00 * y.x + h10 * h * m.x + h01 * y.y + h11 * h * m.y;
}

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, params.ro.roi))) return;

  imageStore(img_out, ipos, vec4(vec3(params.x.y), 1));
  // float lum0 = texelFetch(img_lum, ipos, 0).r;
  // imageStore(img_out, ipos, vec4(vec3(lum0), 1));
  return;//XXX

  vec3 rgb = texelFetch(img_in, ipos, 0).rgb;
  imageStore(img_out, ipos, vec4(rgb, 1));
  return;//XXX

  vec3 w = vec3(0.299, 0.587, 0.114);
  float l0 = dot(w, rgb);
  // float l1 = hermite4(l0);
  const float black_ev = params.black;
  const float black = exp2(black_ev);
  float white = 1.0f+exp2(black_ev);
  float l1 = hermite4((log2(l0+black)-black_ev)/(log2(white)-black_ev));
  // colour reconstruction: keep rgb saturation ratio same as before
  rgb *= l1/l0;
  // want to see why 8-bit output sucks? try this:
  // float l1 = hermite4(ipos.x / float(params.ro.roi.x));
  // rgba.rgb = vec3(l1);
  imageStore(img_out, ipos, vec4(rgb, 1));
}

