#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

// global uniform stuff about image and roi
layout(std140, set = 0, binding = 0) uniform params_t
{
  roi_t ri;
  roi_t ro;
} params;


layout( // input uint8 buffer rgba
    set = 1, binding = 0
) uniform usampler2D img_in;

layout( // output f16 buffer rgb
    set = 1, binding = 1
) uniform writeonly image2D img_out;

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, params.ro.roi))) return;

  vec4 rgba = texelFetch(img_in, ipos, 0).rgba/256.0;
  // undo srgb tone curve
  rgba.r = rgba.r <= 0.04045 ? rgba.r / 12.92 : pow((rgba.r + 0.055) / (1 + 0.055), 2.4);
  rgba.g = rgba.g <= 0.04045 ? rgba.g / 12.92 : pow((rgba.g + 0.055) / (1 + 0.055), 2.4);
  rgba.b = rgba.b <= 0.04045 ? rgba.b / 12.92 : pow((rgba.b + 0.055) / (1 + 0.055), 2.4);
  // convert linear rec709 to linear rec2020 (very similar to ACES ap1 indeed, except slight jitter in green + D65 instead of D60)
  mat3 M = mat3(
      0.47283627,  0.42359894,  0.07112664,
      -0.11042244,  1.07730161,  0.02538906,
      -0.02951065,  0.14515004,  0.89226538);
  // convert linear rec709 to ACES ap1
  // mat3 M = mat3(
  //     0.61319, 0.33951, 0.04737,
  //     0.07021, 0.91634, 0.01345,
  //     0.02062, 0.10957, 0.86961);
  imageStore(img_out, ipos, vec4(rgba.rgb*M, 1.0));
}
