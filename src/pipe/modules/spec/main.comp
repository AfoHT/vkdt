#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"
#include "moments.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 1) uniform params_t
{
  vec4  white;
  float split;
  float sat;
  int   gamut_mode;
} params;


layout( // input f16 buffer rgb
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // input spec coeff lut
    set = 1, binding = 1
) uniform sampler2D img_coeff;

layout( // output f16 buffer rgb
    set = 1, binding = 2
) uniform writeonly image2D img_out;

layout( // input spec coeff lut
    set = 1, binding = 3
) uniform sampler2D img_ls;

// this is sufficiently different to D65, can't use it:
double blackbody_radiation(
    double lambda,      // in [nm]
    double temperature) // in [K]
{
  const double h = 6.62606957e-34; // Planck's constant [J s]
  const double c = 299792458.0;    // speed of light [m/s]
  const double k = 1.3807e-23;     // Boltzmann's constant [J/K]
  const double lambda_m = lambda*1e-9; // lambda [m]
  const double lambda2 = lambda_m*lambda_m;
  const double lambda5 = lambda2*lambda_m*lambda2;
  const double c1 = 2. * h * c * c / lambda5;
  const double c2 = h * c / (lambda_m * temperature * k);
  // convert to spectral radiance in [W/m^2 / sr / nm]
  return 2.21566e-16 * c1 / (exp(c2)-1.0);
}

#if 0
const vec3 rgb_cmf[] = { // full res xyz_to_rec2020 * cie_cmf (no illuminant)
vec3(6.80345e-05, -7.07132e-05, 0.000573133), // 360 nm
vec3(8.56236e-05, -8.92602e-05, 0.000724395), // 361.667 nm
vec3(0.000103213, -0.000107807, 0.000875658), // 363.333 nm
vec3(0.000120802, -0.000126354, 0.00102692), // 365 nm
vec3(0.000152128, -0.000159534, 0.00129799), // 366.667 nm
vec3(0.000183455, -0.000192714, 0.00156905), // 368.333 nm
vec3(0.000214781, -0.000225894, 0.00184012), // 370 nm
vec3(0.000270521, -0.000285212, 0.00232552), // 371.667 nm
vec3(0.000326262, -0.000344531, 0.00281091), // 373.333 nm
vec3(0.000382002, -0.000403849, 0.00329631), // 375 nm
vec3(0.000488099, -0.000518324, 0.00423055), // 376.667 nm
vec3(0.000594197, -0.000632799, 0.00516479), // 378.333 nm
vec3(0.000700295, -0.000747274, 0.00609903), // 380 nm
vec3(0.000847749, -0.000905147, 0.00739131), // 381.667 nm
vec3(0.000995203, -0.00106302, 0.0086836), // 383.333 nm
vec3(0.00114266, -0.00122089, 0.00997588), // 385 nm
vec3(0.00148213, -0.0015868, 0.0129702), // 386.667 nm
vec3(0.0018216, -0.0019527, 0.0159646), // 388.333 nm
vec3(0.00216107, -0.0023186, 0.0189589), // 390 nm
vec3(0.00273432, -0.00293853, 0.0240523), // 391.667 nm
vec3(0.00330756, -0.00355845, 0.0291458), // 393.333 nm
vec3(0.00388081, -0.00417838, 0.0342392), // 395 nm
vec3(0.00499838, -0.00539566, 0.0442119), // 396.667 nm
vec3(0.00611595, -0.00661295, 0.0541845), // 398.333 nm
vec3(0.00723353, -0.00783023, 0.0641572), // 400 nm
vec3(0.0087092, -0.00944954, 0.0775053), // 401.667 nm
vec3(0.0101849, -0.0110689, 0.0908534), // 403.333 nm
vec3(0.0116605, -0.0126882, 0.104201), // 405 nm
vec3(0.0150114, -0.0163858, 0.134837), // 406.667 nm
vec3(0.0183622, -0.0200835, 0.165472), // 408.333 nm
vec3(0.021713, -0.0237811, 0.196108), // 410 nm
vec3(0.0272798, -0.0299794, 0.247765), // 411.667 nm
vec3(0.0328466, -0.0361776, 0.299422), // 413.333 nm
vec3(0.0384134, -0.0423759, 0.351079), // 415 nm
vec3(0.0475048, -0.0525649, 0.437526), // 416.667 nm
vec3(0.0565962, -0.0627539, 0.523974), // 418.333 nm
vec3(0.0656876, -0.0729429, 0.610421), // 420 nm
vec3(0.0780679, -0.0869617, 0.734404), // 421.667 nm
vec3(0.0904482, -0.10098, 0.858386), // 423.333 nm
vec3(0.102829, -0.114999, 0.982369), // 425 nm
vec3(0.112608, -0.126223, 1.09154), // 426.667 nm
vec3(0.122388, -0.137447, 1.20072), // 428.333 nm
vec3(0.132167, -0.148672, 1.30989), // 430 nm
vec3(0.13702, -0.154512, 1.38462), // 431.667 nm
vec3(0.141874, -0.160352, 1.45934), // 433.333 nm
vec3(0.146727, -0.166193, 1.53407), // 435 nm
vec3(0.146834, -0.166617, 1.57307), // 436.667 nm
vec3(0.146942, -0.167041, 1.61207), // 438.333 nm
vec3(0.147049, -0.167465, 1.65107), // 440 nm
vec3(0.143115, -0.163565, 1.66213), // 441.667 nm
vec3(0.139182, -0.159666, 1.6732), // 443.333 nm
vec3(0.135248, -0.155766, 1.68426), // 445 nm
vec3(0.128375, -0.148767, 1.68078), // 446.667 nm
vec3(0.121502, -0.141768, 1.6773), // 448.333 nm
vec3(0.11463, -0.134769, 1.67382), // 450 nm
vec3(0.105796, -0.125639, 1.66477), // 451.667 nm
vec3(0.0969622, -0.116509, 1.65573), // 453.333 nm
vec3(0.0881284, -0.107379, 1.64669), // 455 nm
vec3(0.0770666, -0.0951069, 1.62283), // 456.667 nm
vec3(0.0660047, -0.0828345, 1.59898), // 458.333 nm
vec3(0.0549429, -0.0705621, 1.57512), // 460 nm
vec3(0.0424946, -0.0549916, 1.53038), // 461.667 nm
vec3(0.0300463, -0.0394211, 1.48564), // 463.333 nm
vec3(0.017598, -0.0238506, 1.4409), // 465 nm
vec3(0.00398585, -0.0035243, 1.36481), // 466.667 nm
vec3(-0.00962633, 0.016802, 1.28873), // 468.333 nm
vec3(-0.0232385, 0.0371282, 1.21264), // 470 nm
vec3(-0.0355239, 0.0593219, 1.13485), // 471.667 nm
vec3(-0.0478093, 0.0815155, 1.05706), // 473.333 nm
vec3(-0.0600947, 0.103709, 0.979268), // 475 nm
vec3(-0.0704761, 0.127066, 0.90672), // 476.667 nm
vec3(-0.0808576, 0.150423, 0.834172), // 478.333 nm
vec3(-0.091239, 0.173781, 0.761624), // 480 nm
vec3(-0.0997791, 0.197438, 0.699184), // 481.667 nm
vec3(-0.108319, 0.221095, 0.636745), // 483.333 nm
vec3(-0.116859, 0.244752, 0.574305), // 485 nm
vec3(-0.123539, 0.270587, 0.526175), // 486.667 nm
vec3(-0.130218, 0.296421, 0.478045), // 488.333 nm
vec3(-0.136898, 0.322255, 0.429915), // 490 nm
vec3(-0.14335, 0.352768, 0.393958), // 491.667 nm
vec3(-0.149803, 0.38328, 0.358001), // 493.333 nm
vec3(-0.156256, 0.413793, 0.322044), // 495 nm
vec3(-0.162633, 0.450244, 0.295537), // 496.667 nm
vec3(-0.169009, 0.486695, 0.26903), // 498.333 nm
vec3(-0.175386, 0.523146, 0.242524), // 500 nm
vec3(-0.181769, 0.568811, 0.222559), // 501.667 nm
vec3(-0.188152, 0.614476, 0.202595), // 503.333 nm
vec3(-0.194534, 0.66014, 0.18263), // 505 nm
vec3(-0.197363, 0.709888, 0.164317), // 506.667 nm
vec3(-0.200192, 0.759636, 0.146004), // 508.333 nm
vec3(-0.20302, 0.809384, 0.127691), // 510 nm
vec3(-0.200235, 0.861425, 0.111705), // 511.667 nm
vec3(-0.19745, 0.913465, 0.0957191), // 513.333 nm
vec3(-0.194665, 0.965505, 0.0797332), // 515 nm
vec3(-0.184357, 1.01259, 0.0679783), // 516.667 nm
vec3(-0.174048, 1.05967, 0.0562234), // 518.333 nm
vec3(-0.16374, 1.10675, 0.0444685), // 520 nm
vec3(-0.145319, 1.14118, 0.03696), // 521.667 nm
vec3(-0.126899, 1.1756, 0.0294516), // 523.333 nm
vec3(-0.108478, 1.21003, 0.0219431), // 525 nm
vec3(-0.0833737, 1.2346, 0.0165521), // 526.667 nm
vec3(-0.058269, 1.25917, 0.0111612), // 528.333 nm
vec3(-0.0331644, 1.28374, 0.0057702), // 530 nm
vec3(-0.0039136, 1.29876, 0.00150208), // 531.667 nm
vec3(0.0253372, 1.31378, -0.00276603), // 533.333 nm
vec3(0.0545879, 1.3288, -0.00703415), // 535 nm
vec3(0.087746, 1.33548, -0.0102081), // 536.667 nm
vec3(0.120904, 1.34216, -0.013382), // 538.333 nm
vec3(0.154062, 1.34884, -0.0165559), // 540 nm
vec3(0.191182, 1.34757, -0.0186902), // 541.667 nm
vec3(0.228301, 1.34631, -0.0208245), // 543.333 nm
vec3(0.26542, 1.34504, -0.0229588), // 545 nm
vec3(0.306277, 1.33652, -0.0241943), // 546.667 nm
vec3(0.347134, 1.328, -0.0254298), // 548.333 nm
vec3(0.387991, 1.31948, -0.0266652), // 550 nm
vec3(0.432622, 1.30472, -0.0272172), // 551.667 nm
vec3(0.477253, 1.28996, -0.0277691), // 553.333 nm
vec3(0.521884, 1.2752, -0.028321), // 555 nm
vec3(0.569812, 1.25417, -0.0283459), // 556.667 nm
vec3(0.61774, 1.23314, -0.0283708), // 558.333 nm
vec3(0.665669, 1.21212, -0.0283957), // 560 nm
vec3(0.715719, 1.18463, -0.0280297), // 561.667 nm
vec3(0.76577, 1.15714, -0.0276637), // 563.333 nm
vec3(0.81582, 1.12965, -0.0272977), // 565 nm
vec3(0.866923, 1.09672, -0.0266304), // 566.667 nm
vec3(0.918026, 1.06378, -0.0259631), // 568.333 nm
vec3(0.969129, 1.03084, -0.0252959), // 570 nm
vec3(1.0195, 0.993253, -0.0243955), // 571.667 nm
vec3(1.06987, 0.955664, -0.0234952), // 573.333 nm
vec3(1.12024, 0.918074, -0.0225949), // 575 nm
vec3(1.16787, 0.87721, -0.0215608), // 576.667 nm
vec3(1.21549, 0.836346, -0.0205267), // 578.333 nm
vec3(1.26312, 0.795482, -0.0194926), // 580 nm
vec3(1.30515, 0.752701, -0.0184392), // 581.667 nm
vec3(1.34719, 0.70992, -0.0173857), // 583.333 nm
vec3(1.38923, 0.667138, -0.0163323), // 585 nm
vec3(1.42358, 0.624584, -0.0153006), // 586.667 nm
vec3(1.45793, 0.58203, -0.014269), // 588.333 nm
vec3(1.49228, 0.539475, -0.0132373), // 590 nm
vec3(1.51704, 0.499258, -0.0122046), // 591.667 nm
vec3(1.54181, 0.459041, -0.0111719), // 593.333 nm
vec3(1.56658, 0.418823, -0.0101392), // 595 nm
vec3(1.57732, 0.383169, -0.00925861), // 596.667 nm
vec3(1.58806, 0.347515, -0.00837806), // 598.333 nm
vec3(1.5988, 0.31186, -0.00749752), // 600 nm
vec3(1.59693, 0.280955, -0.00674264), // 601.667 nm
vec3(1.59505, 0.250051, -0.00598776), // 603.333 nm
vec3(1.59318, 0.219146, -0.00523289), // 605 nm
vec3(1.57616, 0.194323, -0.00465779), // 606.667 nm
vec3(1.55915, 0.1695, -0.00408268), // 608.333 nm
vec3(1.54213, 0.144678, -0.00350758), // 610 nm
vec3(1.51272, 0.125645, -0.0030354), // 611.667 nm
vec3(1.48332, 0.106612, -0.00256323), // 613.333 nm
vec3(1.45392, 0.0875787, -0.00209105), // 615 nm
vec3(1.41303, 0.0737971, -0.00174211), // 616.667 nm
vec3(1.37213, 0.0600155, -0.00139317), // 618.333 nm
vec3(1.33123, 0.046234, -0.00104423), // 620 nm
vec3(1.27939, 0.0368045, -0.000823009), // 621.667 nm
vec3(1.22754, 0.0273749, -0.000601788), // 623.333 nm
vec3(1.1757, 0.0179454, -0.000380568), // 625 nm
vec3(1.11997, 0.0119937, -0.000238799), // 626.667 nm
vec3(1.06424, 0.006042, -9.70312e-05), // 628.333 nm
vec3(1.00851, 9.02885e-05, 4.4737e-05), // 630 nm
vec3(0.956696, -0.00343959, 0.000131851), // 631.667 nm
vec3(0.904881, -0.00696947, 0.000218965), // 633.333 nm
vec3(0.853065, -0.0104993, 0.000306079), // 635 nm
vec3(0.804257, -0.0122407, 0.000349011), // 636.667 nm
vec3(0.755449, -0.013982, 0.000391944), // 638.333 nm
vec3(0.706641, -0.0157234, 0.000434877), // 640 nm
vec3(0.661164, -0.0161962, 0.000444246), // 641.667 nm
vec3(0.615688, -0.016669, 0.000453614), // 643.333 nm
vec3(0.570212, -0.0171418, 0.000462983), // 645 nm
vec3(0.529679, -0.0167751, 0.000450137), // 646.667 nm
vec3(0.489146, -0.0164083, 0.00043729), // 648.333 nm
vec3(0.448614, -0.0160415, 0.000424444), // 650 nm
vec3(0.414546, -0.0153273, 0.000405548), // 651.667 nm
vec3(0.380477, -0.0146132, 0.000386651), // 653.333 nm
vec3(0.346409, -0.013899, 0.000367755), // 655 nm
vec3(0.318066, -0.013043, 0.000345105), // 656.667 nm
vec3(0.289723, -0.0121869, 0.000322455), // 658.333 nm
vec3(0.26138, -0.0113309, 0.000299805), // 660 nm
vec3(0.238321, -0.0104671, 0.000276949), // 661.667 nm
vec3(0.215262, -0.00960324, 0.000254093), // 663.333 nm
vec3(0.192202, -0.00873941, 0.000231237), // 665 nm
vec3(0.174353, -0.00800654, 0.000211846), // 666.667 nm
vec3(0.156503, -0.00727368, 0.000192455), // 668.333 nm
vec3(0.138654, -0.00654081, 0.000173064), // 670 nm
vec3(0.126078, -0.00599346, 0.000158582), // 671.667 nm
vec3(0.113503, -0.00544611, 0.000144099), // 673.333 nm
vec3(0.100927, -0.00489876, 0.000129617), // 675 nm
vec3(0.0920321, -0.00449939, 0.00011905), // 676.667 nm
vec3(0.0831367, -0.00410002, 0.000108483), // 678.333 nm
vec3(0.0742414, -0.00370065, 9.79157e-05), // 680 nm
vec3(0.066907, -0.00335558, 8.87857e-05), // 681.667 nm
vec3(0.0595726, -0.00301052, 7.96556e-05), // 683.333 nm
vec3(0.0522382, -0.00266546, 7.05256e-05), // 685 nm
vec3(0.0468415, -0.00239778, 6.34431e-05), // 686.667 nm
vec3(0.0414447, -0.0021301, 5.63606e-05), // 688.333 nm
vec3(0.0360479, -0.00186242, 4.9278e-05), // 690 nm
vec3(0.0324174, -0.001678, 4.43984e-05), // 691.667 nm
vec3(0.0287868, -0.00149358, 3.95188e-05), // 693.333 nm
vec3(0.0251563, -0.00130916, 3.46391e-05), // 695 nm
vec3(0.0227844, -0.00118683, 3.14024e-05), // 696.667 nm
vec3(0.0204126, -0.0010645, 2.81656e-05), // 698.333 nm
vec3(0.0180408, -0.000942168, 2.49289e-05), // 700 nm
vec3(0.0163211, -0.000852361, 2.25527e-05), // 701.667 nm
vec3(0.0146015, -0.000762554, 2.01765e-05), // 703.333 nm
vec3(0.0128819, -0.000672747, 1.78003e-05), // 705 nm
vec3(0.0116533, -0.000608588, 1.61027e-05), // 706.667 nm
vec3(0.0104248, -0.00054443, 1.44051e-05), // 708.333 nm
vec3(0.0091963, -0.000480271, 1.27075e-05), // 710 nm
vec3(0.00830643, -0.000433798, 1.14779e-05), // 711.667 nm
vec3(0.00741656, -0.000387325, 1.02483e-05), // 713.333 nm
vec3(0.00652669, -0.000340853, 9.01865e-06), // 715 nm
vec3(0.00588604, -0.000307395, 8.13339e-06), // 716.667 nm
vec3(0.00524539, -0.000273938, 7.24814e-06), // 718.333 nm
vec3(0.00460475, -0.00024048, 6.36288e-06), // 720 nm
vec3(0.00415468, -0.000216976, 5.74098e-06), // 721.667 nm
vec3(0.00370461, -0.000193471, 5.11907e-06), // 723.333 nm
vec3(0.00325455, -0.000169967, 4.49717e-06), // 725 nm
vec3(0.00293203, -0.000153123, 4.0515e-06), // 726.667 nm
vec3(0.0026095, -0.00013628, 3.60583e-06), // 728.333 nm
vec3(0.00228698, -0.000119436, 3.16016e-06), // 730 nm
vec3(0.00205403, -0.00010727, 2.83827e-06), // 731.667 nm
vec3(0.00182108, -9.51047e-05, 2.51638e-06), // 733.333 nm
vec3(0.00158813, -8.29392e-05, 2.19449e-06), // 735 nm
vec3(0.00142408, -7.43719e-05, 1.96781e-06), // 736.667 nm
vec3(0.00126004, -6.58047e-05, 1.74113e-06), // 738.333 nm
vec3(0.00109599, -5.72375e-05, 1.51445e-06), // 740 nm
vec3(0.000982668, -5.13193e-05, 1.35786e-06), // 741.667 nm
vec3(0.000869346, -4.5401e-05, 1.20127e-06), // 743.333 nm
vec3(0.000756023, -3.94828e-05, 1.04468e-06), // 745 nm
vec3(0.000679937, -3.55093e-05, 9.39543e-07), // 746.667 nm
vec3(0.000603851, -3.15357e-05, 8.34407e-07), // 748.333 nm
vec3(0.000527765, -2.75622e-05, 7.2927e-07), // 750 nm
vec3(0.000476161, -2.48672e-05, 6.57964e-07), // 751.667 nm
vec3(0.000424557, -2.21722e-05, 5.86657e-07), // 753.333 nm
vec3(0.000372954, -1.94773e-05, 5.15351e-07), // 755 nm
vec3(0.000336596, -1.75785e-05, 4.65112e-07), // 756.667 nm
vec3(0.000300239, -1.56798e-05, 4.14873e-07), // 758.333 nm
vec3(0.000263882, -1.37811e-05, 3.64634e-07), // 760 nm
vec3(0.00023808, -1.24336e-05, 3.28981e-07), // 761.667 nm
vec3(0.000212279, -1.10861e-05, 2.93328e-07), // 763.333 nm
vec3(0.000186477, -9.73861e-06, 2.57675e-07), // 765 nm
vec3(0.000168298, -8.78925e-06, 2.32556e-07), // 766.667 nm
vec3(0.00015012, -7.8399e-06, 2.07437e-07), // 768.333 nm
vec3(0.000131941, -6.89055e-06, 1.82318e-07), // 770 nm
vec3(0.00011904, -6.2168e-06, 1.64491e-07), // 771.667 nm
vec3(0.000106139, -5.54306e-06, 1.46664e-07), // 773.333 nm
vec3(9.32384e-05, -4.86932e-06, 1.28838e-07), // 775 nm
vec3(8.41345e-05, -4.39387e-06, 1.16258e-07), // 776.667 nm
vec3(7.50305e-05, -3.91842e-06, 1.03678e-07), // 778.333 nm
vec3(6.59266e-05, -3.44297e-06, 9.10979e-08), // 780 nm
vec3(5.94908e-05, -3.10687e-06, 8.22049e-08), // 781.667 nm
vec3(5.3055e-05, -2.77076e-06, 7.33119e-08), // 783.333 nm
vec3(4.66192e-05, -2.43466e-06, 6.44188e-08), // 785 nm
vec3(4.20243e-05, -2.19469e-06, 5.80695e-08), // 786.667 nm
vec3(3.74293e-05, -1.95472e-06, 5.17202e-08), // 788.333 nm
vec3(3.28344e-05, -1.71475e-06, 4.53708e-08), // 790 nm
vec3(2.95976e-05, -1.54572e-06, 4.08982e-08), // 791.667 nm
vec3(2.63608e-05, -1.37668e-06, 3.64256e-08), // 793.333 nm
vec3(2.3124e-05, -1.20764e-06, 3.19529e-08), // 795 nm
vec3(2.08445e-05, -1.08859e-06, 2.88031e-08), // 796.667 nm
vec3(1.8565e-05, -9.69545e-07, 2.56533e-08), // 798.333 nm
vec3(1.62855e-05, -8.505e-07, 2.25034e-08), // 800 nm
vec3(1.46801e-05, -7.66657e-07, 2.0285e-08), // 801.667 nm
vec3(1.30746e-05, -6.82815e-07, 1.80666e-08), // 803.333 nm
vec3(1.14692e-05, -5.98972e-07, 1.58482e-08), // 805 nm
vec3(1.03386e-05, -5.39928e-07, 1.4286e-08), // 806.667 nm
vec3(9.20803e-06, -4.80883e-07, 1.27237e-08), // 808.333 nm
vec3(8.07744e-06, -4.21839e-07, 1.11615e-08), // 810 nm
vec3(7.2811e-06, -3.80251e-07, 1.00611e-08), // 811.667 nm
vec3(6.48476e-06, -3.38663e-07, 8.96071e-09), // 813.333 nm
vec3(5.68842e-06, -2.97075e-07, 7.86032e-09), // 815 nm
vec3(5.12772e-06, -2.67792e-07, 7.08553e-09), // 816.667 nm
vec3(4.56701e-06, -2.38509e-07, 6.31074e-09), // 818.333 nm
vec3(4.0063e-06, -2.09227e-07, 5.53595e-09), // 820 nm
vec3(3.61136e-06, -1.88601e-07, 4.99021e-09), // 821.667 nm
vec3(3.21642e-06, -1.67975e-07, 4.44447e-09), // 823.333 nm
vec3(2.82147e-06, -1.4735e-07, 3.89873e-09), // 825 nm
vec3(2.54334e-06, -1.32824e-07, 3.51441e-09), // 826.667 nm
vec3(2.26521e-06, -1.18299e-07, 3.13008e-09), // 828.333 nm
vec3(1.98708e-06, -1.03774e-07, 2.74576e-09), // 830 nm
};
#else
// these are dumped from the lut matching utility and contain
// xyz cmf * xyz to rec2020 matrix * illuminant D65
const vec3 rgb_cmf[] = { // 30 entries, centered in 10nm bins:
// these contain no illuminant, we'll multiply ours
vec3(0.0116605, -0.0126882, 0.104201), // 405 nm
vec3(0.0384134, -0.0423759, 0.351079), // 415 nm
vec3(0.102829, -0.114999, 0.982369), // 425 nm
vec3(0.146727, -0.166193, 1.53407), // 435 nm
vec3(0.135248, -0.155766, 1.68426), // 445 nm
vec3(0.0881284, -0.107379, 1.64669), // 455 nm
vec3(0.017598, -0.0238506, 1.4409), // 465 nm
vec3(-0.0600947, 0.103709, 0.979268), // 475 nm
vec3(-0.116859, 0.244752, 0.574305), // 485 nm
vec3(-0.156256, 0.413793, 0.322044), // 495 nm
vec3(-0.194534, 0.66014, 0.18263), // 505 nm
vec3(-0.194665, 0.965505, 0.0797332), // 515 nm
vec3(-0.108478, 1.21003, 0.0219431), // 525 nm
vec3(0.0545879, 1.3288, -0.00703415), // 535 nm
vec3(0.26542, 1.34504, -0.0229588), // 545 nm
vec3(0.521884, 1.2752, -0.028321), // 555 nm
vec3(0.81582, 1.12965, -0.0272977), // 565 nm
vec3(1.12024, 0.918074, -0.0225949), // 575 nm
vec3(1.38923, 0.667138, -0.0163323), // 585 nm
vec3(1.56658, 0.418823, -0.0101392), // 595 nm
vec3(1.59318, 0.219146, -0.00523289), // 605 nm
vec3(1.45392, 0.0875787, -0.00209105), // 615 nm
vec3(1.1757, 0.0179454, -0.000380568), // 625 nm
vec3(0.853065, -0.0104993, 0.000306079), // 635 nm
vec3(0.570212, -0.0171418, 0.000462983), // 645 nm
vec3(0.346409, -0.013899, 0.000367755), // 655 nm
vec3(0.192202, -0.00873941, 0.000231237), // 665 nm
vec3(0.100927, -0.00489876, 0.000129617), // 675 nm
vec3(0.0522382, -0.00266546, 7.05256e-05), // 685 nm
vec3(0.0251563, -0.00130916, 3.46391e-05), // 695 nm
// these contain illuminant D65
// vec3(9.61375e-05, -0.00010461, 0.000859108), // 405 nm
// vec3(0.000336113, -0.000370785, 0.0030719), // 415 nm
// vec3(0.000876365, -0.00098009, 0.00837232), // 425 nm
// vec3(0.00132987, -0.0015063, 0.0139042), // 435 nm
// vec3(0.0014199, -0.00163531, 0.0176821), // 445 nm
// vec3(0.000979208, -0.00119311, 0.0182966), // 455 nm
// vec3(0.000193746, -0.000262583, 0.0158636), // 465 nm
// vec3(-0.000656245, 0.00113252, 0.0106938), // 475 nm
// vec3(-0.00124267, 0.00260267, 0.0061071), // 485 nm
// vec3(-0.00161303, 0.00427159, 0.00332447), // 495 nm
// vec3(-0.0019989, 0.00678316, 0.00187659), // 505 nm
// vec3(-0.00195821, 0.00971237, 0.000802065), // 515 nm
// vec3(-0.00109064, 0.0121656, 0.000220615), // 525 nm
// vec3(0.000547834, 0.0133356, -7.05933e-05), // 535 nm
// vec3(0.00261794, 0.0132667, -0.000226451), // 545 nm
// vec3(0.00503878, 0.012312, -0.000273439), // 555 nm
// vec3(0.00757904, 0.0104946, -0.000253598), // 565 nm
// vec3(0.0101839, 0.00834601, -0.000205405), // 575 nm
// vec3(0.0121264, 0.00582337, -0.000142563), // 585 nm
// vec3(0.0132459, 0.00354127, -8.57295e-05), // 595 nm
// vec3(0.0135397, 0.00186241, -4.44717e-05), // 605 nm
// vec3(0.0121974, 0.000734727, -1.75425e-05), // 615 nm
// vec3(0.00951223, 0.000145192, -3.07907e-06), // 625 nm
// vec3(0.00674048, -8.29604e-05, 2.41848e-06), // 635 nm
// vec3(0.00441751, -0.0001328, 3.58679e-06), // 645 nm
// vec3(0.00262656, -0.000105386, 2.78841e-06), // 655 nm
// vec3(0.0014778, -6.71953e-05, 1.77793e-06), // 665 nm
// vec3(0.000766789, -3.7218e-05, 9.84754e-07), // 675 nm
// vec3(0.000365839, -1.8667e-05, 4.9391e-07), // 685 nm
// vec3(0.000168231, -8.75491e-06, 2.31647e-07), // 695 nm
};
#endif

#if 0
const vec3 cie_cmf[] = { // 95 entries for full list, 60 for 400..700@5 and 30 for 400..700@10
// vec3(0.000129900000,0.000003917000,0.000606100000), // 360nm
// vec3(0.000232100000,0.000006965000,0.001086000000),
// vec3(0.000414900000,0.000012390000,0.001946000000),
// vec3(0.000741600000,0.000022020000,0.003486000000),
// vec3(0.001368000000,0.000039000000,0.006450001000),
// vec3(0.002236000000,0.000064000000,0.010549990000),
// vec3(0.004243000000,0.000120000000,0.020050010000),
// vec3(0.007650000000,0.000217000000,0.036210000000),
vec3(0.014310000000,0.000396000000,0.067850010000), // 400nm
// vec3(0.023190000000,0.000640000000,0.110200000000),
vec3(0.043510000000,0.001210000000,0.207400000000),
// vec3(0.077630000000,0.002180000000,0.371300000000),
vec3(0.134380000000,0.004000000000,0.645600000000),
// vec3(0.214770000000,0.007300000000,1.039050100000),
vec3(0.283900000000,0.011600000000,1.385600000000),
// vec3(0.328500000000,0.016840000000,1.622960000000),
vec3(0.348280000000,0.023000000000,1.747060000000),
// vec3(0.348060000000,0.029800000000,1.782600000000),
vec3(0.336200000000,0.038000000000,1.772110000000),
// vec3(0.318700000000,0.048000000000,1.744100000000),
vec3(0.290800000000,0.060000000000,1.669200000000),
// vec3(0.251100000000,0.073900000000,1.528100000000),
vec3(0.195360000000,0.090980000000,1.287640000000),
// vec3(0.142100000000,0.112600000000,1.041900000000),
vec3(0.095640000000,0.139020000000,0.812950100000),
// vec3(0.057950010000,0.169300000000,0.616200000000),
vec3(0.032010000000,0.208020000000,0.465180000000),
// vec3(0.014700000000,0.258600000000,0.353300000000),
vec3(0.004900000000,0.323000000000,0.272000000000),
// vec3(0.002400000000,0.407300000000,0.212300000000),
vec3(0.009300000000,0.503000000000,0.158200000000),
// vec3(0.029100000000,0.608200000000,0.111700000000),
vec3(0.063270000000,0.710000000000,0.078249990000),
// vec3(0.109600000000,0.793200000000,0.057250010000),
vec3(0.165500000000,0.862000000000,0.042160000000),
// vec3(0.225749900000,0.914850100000,0.029840000000),
vec3(0.290400000000,0.954000000000,0.020300000000),
// vec3(0.359700000000,0.980300000000,0.013400000000),
vec3(0.433449900000,0.994950100000,0.008749999000),
// vec3(0.512050100000,1.000000000000,0.005749999000),
vec3(0.594500000000,0.995000000000,0.003900000000),
// vec3(0.678400000000,0.978600000000,0.002749999000),
vec3(0.762100000000,0.952000000000,0.002100000000),
// vec3(0.842500000000,0.915400000000,0.001800000000),
vec3(0.916300000000,0.870000000000,0.001650001000),
// vec3(0.978600000000,0.816300000000,0.001400000000),
vec3(1.026300000000,0.757000000000,0.001100000000),
// vec3(1.056700000000,0.694900000000,0.001000000000),
vec3(1.062200000000,0.631000000000,0.000800000000),
// vec3(1.045600000000,0.566800000000,0.000600000000),
vec3(1.002600000000,0.503000000000,0.000340000000),
// vec3(0.938400000000,0.441200000000,0.000240000000),
vec3(0.854449900000,0.381000000000,0.000190000000),
// vec3(0.751400000000,0.321000000000,0.000100000000),
vec3(0.642400000000,0.265000000000,0.000049999990),
// vec3(0.541900000000,0.217000000000,0.000030000000),
vec3(0.447900000000,0.175000000000,0.000020000000),
// vec3(0.360800000000,0.138200000000,0.000010000000),
vec3(0.283500000000,0.107000000000,0.000000000000),
// vec3(0.218700000000,0.081600000000,0.000000000000),
vec3(0.164900000000,0.061000000000,0.000000000000),
// vec3(0.121200000000,0.044580000000,0.000000000000),
vec3(0.087400000000,0.032000000000,0.000000000000),
// vec3(0.063600000000,0.023200000000,0.000000000000),
vec3(0.046770000000,0.017000000000,0.000000000000),
// vec3(0.032900000000,0.011920000000,0.000000000000),
vec3(0.022700000000,0.008210000000,0.000000000000),
// vec3(0.015840000000,0.005723000000,0.000000000000),
vec3(0.011359160000,0.004102000000,0.000000000000), // 700nm
// vec3(0.008110916000,0.002929000000,0.000000000000),
// vec3(0.005790346000,0.002091000000,0.000000000000),
// vec3(0.004109457000,0.001484000000,0.000000000000),
// vec3(0.002899327000,0.001047000000,0.000000000000),
// vec3(0.002049190000,0.000740000000,0.000000000000),
// vec3(0.001439971000,0.000520000000,0.000000000000),
// vec3(0.000999949300,0.000361100000,0.000000000000),
// vec3(0.000690078600,0.000249200000,0.000000000000),
// vec3(0.000476021300,0.000171900000,0.000000000000),
// vec3(0.000332301100,0.000120000000,0.000000000000),
// vec3(0.000234826100,0.000084800000,0.000000000000),
// vec3(0.000166150500,0.000060000000,0.000000000000),
// vec3(0.000117413000,0.000042400000,0.000000000000),
// vec3(0.000083075270,0.000030000000,0.000000000000),
// vec3(0.000058706520,0.000021200000,0.000000000000),
// vec3(0.000041509940,0.000014990000,0.000000000000),
// vec3(0.000029353260,0.000010600000,0.000000000000),
// vec3(0.000020673830,0.000007465700,0.000000000000),
// vec3(0.000014559770,0.000005257800,0.000000000000),
// vec3(0.000010253980,0.000003702900,0.000000000000),
// vec3(0.000007221456,0.000002607800,0.000000000000),
// vec3(0.000005085868,0.000001836600,0.000000000000),
// vec3(0.000003581652,0.000001293400,0.000000000000),
// vec3(0.000002522525,0.000000910930,0.000000000000),
// vec3(0.000001776509,0.000000641530,0.000000000000),
// vec3(0.000001251141,0.000000451810,0.000000000000), // 830nm
};
#endif


#if 0
// Journal of Computer Graphics Techniques, Simple Analytic Approximations to
// the CIE XYZ Color Matching Functions Vol. 2, No. 2, 2013 http://jcgt.org
//Inputs:  Wavelength in nanometers
float xFit_1931( float wave )
{
  float t1 = (wave-442.0)*((wave<442.0)?0.0624:0.0374);
  float t2 = (wave-599.8)*((wave<599.8)?0.0264:0.0323);
  float t3 = (wave-501.1)*((wave<501.1)?0.0490:0.0382);
  return 0.362*exp(-0.5*t1*t1) + 1.056*exp(-0.5*t2*t2)- 0.065*exp(-0.5*t3*t3);
}
float yFit_1931( float wave )
{
  float t1 = (wave-568.8)*((wave<568.8)?0.0213:0.0247);
  float t2 = (wave-530.9)*((wave<530.9)?0.0613:0.0322);
  return 0.821*exp(-0.5*t1*t1) + 0.286*exp(-0.5*t2*t2);
}
float zFit_1931( float wave )
{
  float t1 = (wave-437.0)*((wave<437.0)?0.0845:0.0278);
  float t2 = (wave-459.0)*((wave<459.0)?0.0385:0.0725);
  return 1.217*exp(-0.5*t1*t1) + 0.681*exp(-0.5*t2*t2);
}
#endif

vec4 bilateral_texture(vec2 tc)
{ // perform an almost bilinearly filtered lookup, only consider n- or u-shaped spectra:
  vec2 tci = tc * textureSize(img_coeff, 0).xy;
  vec2 uv = fract(tci);
  vec4 c0 = texelFetch(img_coeff, ivec2(tci), 0);
  vec4 c1 = texelFetch(img_coeff, ivec2(tci)+ivec2(0,1), 0);
  vec4 c2 = texelFetch(img_coeff, ivec2(tci)+ivec2(1,0), 0);
  vec4 c3 = texelFetch(img_coeff, ivec2(tci)+ivec2(1,1), 0);

  // some bogus criterion to tell n from u shape:
  bool nshaped = true;
  if(c0.x + c1.x + c2.x + c3.x > 0.0) nshaped = false;

  vec4 res = vec4(0.0);
  float w = 0.0;
  if((c0.x > 0) ^^ nshaped) { float w2 = (1.0-uv.x)*(1.0-uv.y); w += w2; res += w2 * c0; }
  if((c1.x > 0) ^^ nshaped) { float w2 = (1.0-uv.x)*(    uv.y); w += w2; res += w2 * c1; }
  if((c2.x > 0) ^^ nshaped) { float w2 = (    uv.x)*(1.0-uv.y); w += w2; res += w2 * c2; }
  if((c3.x > 0) ^^ nshaped) { float w2 = (    uv.x)*(    uv.y); w += w2; res += w2 * c3; }
  return res / w;
}

vec3 fetch_coeff(vec3 rgb, out float Y)
{ // convert to cie xy chromaticity coordinates
  const mat3 rec2020_to_xyz = mat3(
    6.36958048e-01, 2.62700212e-01, 4.20575872e-11,
    1.44616904e-01, 6.77998072e-01, 2.80726931e-02,
    1.68880975e-01, 5.93017165e-02, 1.06098506e+00);
  vec3 xyz = rec2020_to_xyz * rgb;
  Y = xyz.y;
  float b = dot(vec3(1),xyz);
  vec2 tc = xyz.xy/b;
  return bilateral_texture(tc).rgb *  vec3(1e-5, 1.0, 1.0);
}

#if 0
float rand(inout uint x)
{ // Algorithm "xor" from p. 4 of Marsaglia, "Xorshift RNGs"
  x ^= x << 13;
  x ^= x >> 17;
  x ^= x << 5;
  return x * 1.0 / 4294967296.0;
}
#endif

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  vec3 rgb = texelFetch(img_in, ipos, 0).rgb;
  if(ipos.x < params.split * imageSize(img_out).x)
  { // comparison
#if 1 // do something at all?
    vec3 cwp = vec3(params.white);//params.temp*0.49 + 0.5, 1.0, 0.5 - params.temp*0.49); // white
    float Y = dot(vec3(2.62700212e-01, 6.77998072e-01, 5.93017165e-02), rgb);
    // multiply saturation in rgb?
    float c = (rgb.r + rgb.g + rgb.b)/3.0;
    rgb.r = (rgb.r - c)*params.sat + c;
    rgb.g = (rgb.g - c)*params.sat + c;
    rgb.b = (rgb.b - c)*params.sat + c;
#if 1 // straight multiplication:
    // this sticks to the rec2020 boundary because it doesn't go < 0
    rgb *= cwp; 
#else // bradford adaptation:
    const mat3 rec2020_to_xyz = mat3(
      6.36958048e-01, 2.62700212e-01, 4.20575872e-11,
      1.44616904e-01, 6.77998072e-01, 2.80726931e-02,
      1.68880975e-01, 5.93017165e-02, 1.06098506e+00);
    const mat3 xyz_to_rec2020 = mat3(
      1.71665119, -0.66668435,  0.01763986,
     -0.35567078,  1.61648124, -0.04277061,
     -0.25336628,  0.01576855,  0.94210312);
#if 0
    const mat3 xyz_to_bradford = mat3(
       0.8951000, -0.7502000,  0.0389000,
       0.2664000,  1.7135000, -0.0685000,
      -0.1614000,  0.0367000,  1.0296000);
    const mat3 bradford_to_xyz = mat3(
       0.9869929, 0.4323053, -0.0085287,
      -0.1470543, 0.5183603,  0.0400428,
       0.1599627, 0.0492912,  0.9684867);
    // convert white and rgb to xyz to bradford:
    cwp = xyz_to_bradford * (rec2020_to_xyz * cwp);
    rgb = xyz_to_bradford * (rec2020_to_xyz * rgb);
    rgb *= cwp;
    rgb = clamp(rgb, vec3(0.), vec3(1.));
    rgb = xyz_to_rec2020 * (bradford_to_xyz * rgb);
#else // divide in XYZ
    cwp = rec2020_to_xyz * cwp;
    rgb = rec2020_to_xyz * rgb;
    rgb *= cwp;
    rgb = xyz_to_rec2020 * rgb;
#endif
#endif
    float Y2 = dot(vec3(2.62700212e-01, 6.77998072e-01, 5.93017165e-02), rgb);
    rgb *= Y/Y2;
#endif
  }
  else
  { // spectral
#if 1 // change saturation:
  const mat3 xyz_to_rec2020 = mat3(
    1.71665119, -0.66668435,  0.01763986,
   -0.35567078,  1.61648124, -0.04277061,
   -0.25336628,  0.01576855,  0.94210312);
  const mat3 rec2020_to_xyz = mat3(
    6.36958048e-01, 2.62700212e-01, 4.20575872e-11,
    1.44616904e-01, 6.77998072e-01, 2.80726931e-02,
    1.68880975e-01, 5.93017165e-02, 1.06098506e+00);
  // TODO: work on rec2020/rb space instead?

  // use lambda/saturation lut to walk saturation:
  // lookup lambda and saturation from one lut by xy
  vec3 xyz = rec2020_to_xyz * rgb;
  float Y = xyz.y;
  float b = xyz.x+xyz.y+xyz.z;
  vec2 tc = xyz.xy/b;

  // do bilateral/bilinear interpolation (see fetch_coeff but do it correctly)
  vec4 lut = bilateral_texture(tc);

  vec2 sl = lut.wz; // grab saturation and lambda
  // normalised wavelength, logistically compressed:
  float norm = (sl.y - 400.0)/(700.0-400.0);
  sl.y = clamp(0.5/(1.0+exp(-2.0*(2.0*norm-1.0))), 0.0, 0.5);
  if(lut.x > 0.0) sl.y += 0.5;
  // this is where we would be at (unbounded params.sat)
  float m = params.sat * sl.x;
  // but we want to compress input in [sl.x.. infty) into
  // the interval [sl.x .. max_sat.x]
  if(params.gamut_mode > 0)
  {
    float bound = 1.0; // spectral locus
    if(params.gamut_mode > 1)
    {
      vec2 max_sat = texelFetch(img_ls, ivec2(textureSize(img_ls, 0).x-1, sl.y*textureSize(img_ls, 0).y), 0).rg;
      if(params.gamut_mode == 2) bound = max_sat.y; // rec2020
      if(params.gamut_mode == 3) bound = max_sat.x; // rec709
    }
    if(params.sat > 1.0)
      m = mix(sl.x, bound, (m - sl.x)/(m - sl.x + 1.0));
    sl.x = m;
  }
  else sl.x = clamp(m, 0.0, 0.99); // XXX make sure we don't hit the last column (gamut limits stored there)
  // use lambda/sat lut to get new xy chroma values
  vec2 xy = texture(img_ls, sl, 0).rg;
  // go back to colour
  xyz = vec3(xy, 1.0-xy.x-xy.y);
  xyz *= Y / xyz.y;
  rgb = xyz_to_rec2020 * xyz;
#endif

#if 1 // wb using sigmoids
  vec3 cwp   = fetch_coeff(vec3(params.white), Y);//params.temp*0.49 + 0.5, 1.0, 0.5 - params.temp*0.49), b);
  vec3 coeff = fetch_coeff(rgb, Y);

  // FIXME:
  // * desaturation goes to D65 for rgb and to E for spectral
  // * spectral white balance * (1 1 1) means * D65 (so you can desaturate and wb 1 1 1 to yield a D65 spectrum and 1 1 1 rgb)
  // * rgb wb * (1 1 1) means passthrough, i.e. * E (so desat and wb 1 1 1 yields D65 too, but for different reasons)
  // * rgb vs spectral at sat==1 shows some slight jumps in the spectra near the borders (??) though i can't see the diff in the img
  // * spectral sat is numerically unstable on the blue/white/red ridge
  // * spectral sat seems to shift the center wavelength (orange patch) even though it should not.

  // DEBUG
  // cwp = vec3(0.00014479, -0.189595, 62.5251); // d65 / 1.1
  // cwp = vec3(-9.16167e-06, 0.00870653, -2.35259); // d65 / 3
  // cwp = vec3(0, 0, 100000); // E / 2.0
  // 4.47548e-07, -0.000481296, -0.22512 would be E / 3.0

  const int num_l = 30;
  rgb = vec3(0);
  for(int l=0;l<num_l;l++)
  { // compute spectrum
    const float lambda = 400.0 + (l+0.5)/float(num_l) * (700.0 - 400.0); // abridged 10nm center version (30 entries)
    // const float lambda = 360.0 + l/(num_l-1.0) * (830.0 - 360.0);  // full version (283 entries)
    float x = coeff.x * (lambda - coeff.z)*(lambda - coeff.z) + coeff.y;
    float y = 1. / sqrt(x * x + 1.);
    float val = 0.5 * x * y +  0.5;
    float xw  = cwp.x * (lambda - cwp.z)*(lambda - cwp.z) + cwp.y;
    float yw  = 1. / sqrt(xw * xw + 1.);
    float wht = 0.5 * xw * yw +  0.5;

    rgb += val * wht * rgb_cmf[l];
  }
  // keep perceived brightness Y the same, evaluate new Y by row in rec2020_to_xyz
  float Y2 = dot(vec3(2.62700212e-01, 6.77998072e-01, 5.93017165e-02), rgb);
  rgb *= Y/Y2;
#endif
  } // end if split

  imageStore(img_out, ipos, vec4(rgb, 1));
}
