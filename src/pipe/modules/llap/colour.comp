#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 1) uniform params_t
{
  float sigma;
  float shadows;
  float highlights;
  float clarity;
} params;

layout( // input f16 buffer y
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // input f16 buffer rgba original colour
    set = 1, binding = 1
) uniform sampler2D img_org;

layout( // output f16 buffer local contrast + colour
    set = 1, binding = 2
) uniform writeonly image2D img_out;

// use the colour reconstruction proposed in Mantiuk et al. "Color correction
// for tone mapping" (EG 2009):
// instead of simple RGB scaling or Lab magic, they propose a sigmoid function
// that saturates colour saturation near black and white on the output.
// TODO: factor out into shared.glsl such that filmcurv can do it too
#if 0
  RGBout = (RGBin/Lin)^s Lout               (2)
  RGBout = ((RGBin/Lin - 1)*s + 1) Lout     (3)
  pick one of (2) or (3), (3) is better for exact brightness, but introduces
  more severe hue shifts.
  assume tone curve would be something like
  Lout = (Lin * b)^c                        (4)
  find s(c) as
  s(c) = (1+k1) c^k2 / (1 + k1 c^k2)        (5)
  they find c for non contrast curves as in (4) by using log/log space:
  c(Lin) = d/dlogLin f(logLin)              (6)
  what if we instead approximate the local surroundings of Lin/Lout by
  a contrast curve of shape (4)?
  i.e.
  c = log(Lout)/log(b*Lin)                  (O1)
  probably assuming exposure correction b = 1.
  so:
  a) compute Lout from Lin as we do
  b) compute c by eq (O1)
  c) compute s(c) by eq (5)
  d) compute RGB by eq (2) or (3), to taste
#endif

vec3 adjust_colour(vec3 rgb, float yo, float y)
{
#define EQ2
  float eps = 1e-8;
  // we have to deal with the contrast curve changing sign > 1.0.
  // this can be done various ways. just clamping or evaluating the logarithm of 1+x.
  // log(1+x) looks really very good on landscapes, log(clamp(x)) looks better on
  // much increased blacks for portraits. possibly might tweak this in the future
  // and potentially need to expose control over this in params :(
  float c = clamp(log(1.0+max(y, 0.0))/(log(1.0+max(yo, 0.0)) + eps), 0, 4.0);
  // float c = clamp(log(clamp(y, eps, 1.0))/(log(clamp(yo, eps, 1.0)) + eps), 0, 4.0);
#ifdef EQ2
  float k1 = 1.6774, k2 = .9925;  // params for eq (2)
#else
  float k1 = 2.3892, k2 = 0.8552; // params for eq (3)
#endif
  float s = (1.0+k1) * pow(c, k2) / (1.0 + k1*pow(c, k2));
  s = clamp(s, eps, 1.0-eps);
#ifdef EQ2
  // eq (2) preserving colours, not brightness:
  return pow(rgb/(yo+eps), vec3(s)) * y; // eq (2)
#else
  return ((rgb / yo - 1.0)*s + 1.0) * y;  // eq (3)
#endif
}

void
main()
{
  ivec2 opos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(opos, imageSize(img_out)))) return;

  float y = texelFetch(img_in, opos, 0).r;
  vec3 rgb = texelFetch(img_org, opos, 0).rgb;
  float yo = max(luminance_rec2020(rgb), 1e-8);
  // black rolloff:
  const float c = 1.0f;
  if(y < yo) y = yo * exp(c*(y-yo));
  // colour adjustment
  // rgb *= y/yo;
  rgb = adjust_colour(rgb, yo, y);
  // imageStore(img_out, opos, vec4(vec3(y), 1));
  imageStore(img_out, opos, vec4(max(vec3(0), rgb), 1));
}

