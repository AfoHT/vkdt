#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 1) uniform params_t
{
  float sigma;
  float shadows;
  float highlights;
  float clarity;
} params;

layout( // input f16 buffer y
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // input f16 buffer rgba original colour
    set = 1, binding = 1
) uniform sampler2D img_org;

layout( // output f16 buffer local contrast + colour
    set = 1, binding = 2
) uniform writeonly image2D img_out;

void
main()
{
  ivec2 opos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(opos, imageSize(img_out)))) return;

  float y = exp(texelFetch(img_in, opos, 0).r) - 1e-6;
  vec3 rgb = texelFetch(img_org, opos, 0).rgb;
  float yo = max(luminance_rec2020(rgb), 0.01f);
  float ratio = y/yo;
  // imageStore(img_out, opos, vec4(vec3(y), 1));
  imageStore(img_out, opos, vec4(max(vec3(0), ratio * rgb), 1));
}

