#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"
#include "llap.glsl"

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

// global uniform stuff about image and roi
layout(std140, set = 0, binding = 0) uniform params_t
{
  roi_t ri;
  roi_t ro0;
  roi_t ro1;
  roi_t ro2;
  roi_t ro3;
  roi_t ro4;
  roi_t ro5;
#ifdef LLAP_HQ
  roi_t ro6;
  roi_t ro7;
  roi_t ro8;
  roi_t ro9;
#endif
  roi_t rog;
  vec4 x;
  vec4 y;
  float black;
  float sigma;
  float shadows;
  float highlights;
  float clarity;
} params;

layout( // input f16 buffer rgba
    set = 1, binding = 0
) uniform sampler2D img_in;

// six output buffers for each curve level
layout(set = 1, binding = 1, r16f) uniform image2D img_out0;
layout(set = 1, binding = 2, r16f) uniform image2D img_out1;
layout(set = 1, binding = 3, r16f) uniform image2D img_out2;
layout(set = 1, binding = 4, r16f) uniform image2D img_out3;
layout(set = 1, binding = 5, r16f) uniform image2D img_out4;
layout(set = 1, binding = 6, r16f) uniform image2D img_out5;
#ifdef LLAP_HQ
layout(set = 1, binding = 7,  r16f) uniform image2D img_out6;
layout(set = 1, binding = 8,  r16f) uniform image2D img_out7;
layout(set = 1, binding = 9,  r16f) uniform image2D img_out8;
layout(set = 1, binding = 10, r16f) uniform image2D img_out9;
layout(set = 1, binding = 11, r16f) uniform image2D img_grey;
#else
layout(set = 1, binding = 7, r16f) uniform image2D img_grey;
#endif

float
curve(
    float x,
    float g,
    float sigma,
    float shadows,
    float highlights,
    float clarity)
{
  const float c = x-g;
  float val;
  const float ssigma = c > 0.0f ? sigma : - sigma;
  const float shadhi = c > 0.0f ? shadows : highlights;
  if (abs(c) > 2*sigma) val = g + ssigma + shadhi * (c-ssigma); // linear part
  else
  { // blend in via quadratic bezier
    const float t = clamp(c / (2.0f*ssigma), 0.0f, 1.0f);
    const float t2 = t * t;
    const float mt = 1.0f-t;
    val = g + ssigma * 2.0f*mt*t + t2*(ssigma + ssigma*shadhi);
  }
  // midtone local contrast
  val += clarity * c * exp(-c*c/(2.0f*sigma*sigma/3.0f));
  return val;
}

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, params.ri.roi))) return;

  // ACEScc luma: (TODO: maybe rather use rec2020)
  vec3 w = vec3(0.2126, 0.7152, 0.0722);
  float y = dot(w, texelFetch(img_in, ipos, 0).rgb);

  imageStore(img_out0, ipos, vec4(curve(y, gamma_from_i(0), params.sigma, params.shadows, params.highlights, params.clarity)));
  imageStore(img_out1, ipos, vec4(curve(y, gamma_from_i(1), params.sigma, params.shadows, params.highlights, params.clarity)));
  imageStore(img_out2, ipos, vec4(curve(y, gamma_from_i(2), params.sigma, params.shadows, params.highlights, params.clarity)));
  imageStore(img_out3, ipos, vec4(curve(y, gamma_from_i(3), params.sigma, params.shadows, params.highlights, params.clarity)));
  imageStore(img_out4, ipos, vec4(curve(y, gamma_from_i(4), params.sigma, params.shadows, params.highlights, params.clarity)));
  imageStore(img_out5, ipos, vec4(curve(y, gamma_from_i(5), params.sigma, params.shadows, params.highlights, params.clarity)));
#ifdef LLAP_HQ
  imageStore(img_out6, ipos, vec4(curve(y, gamma_from_i(6), params.sigma, params.shadows, params.highlights, params.clarity)));
  imageStore(img_out7, ipos, vec4(curve(y, gamma_from_i(7), params.sigma, params.shadows, params.highlights, params.clarity)));
  imageStore(img_out8, ipos, vec4(curve(y, gamma_from_i(8), params.sigma, params.shadows, params.highlights, params.clarity)));
  imageStore(img_out9, ipos, vec4(curve(y, gamma_from_i(9), params.sigma, params.shadows, params.highlights, params.clarity)));
#endif
  imageStore(img_grey, ipos, vec4(y));
}

