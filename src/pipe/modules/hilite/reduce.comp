#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 1) uniform params_t
{
  float white;
  float desat;
  float soft;
} params;

layout(push_constant, std140) uniform push_t
{
  vec4 wb;
  uint filters;
} push;

layout( // input f16 buffer y
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // output f16 buffer y blurred/downsized
    set = 1, binding = 1
) uniform writeonly image2D img_out;

// gauss reduce, run on dimensions of reduced output buffer
void
main()
{
  ivec2 opos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(opos, imageSize(img_out)))) return;

  const float white = params.white;
  // blur, store only coarse res
  const float w[5] = {1.0f/16.0f, 4.0f/16.0f, 6.0f/16.0f, 4.0f/16.0f, 1.0f/16.0f};
  vec3 col = vec3(0.0f);
  float wgt = 0.0f;
  for(int jj=-2;jj<=2;jj++) for(int ii=-2;ii<=2;ii++)
  {
    vec3 rgb = texelFetch(img_in, 2*opos+ivec2(ii,jj), 0).rgb;
    float u = w[ii+2]*w[jj+2];
    float cmax = max(rgb.r*push.wb.r, max(rgb.g*push.wb.g, rgb.b*push.wb.b));
    float cmin = min(rgb.r*push.wb.r, min(rgb.g*push.wb.g, rgb.b*push.wb.b));
    float sat = (cmax-cmin)/cmax;
    if(all(lessThan(rgb, vec3(white))))
    {
      float s = smoothstep(0.2, 1.0, max(rgb.r, max(rgb.g, rgb.b))/white);
      u *= smoothstep(0.0, 1.0, 1.0 - sat);
      float t = smoothstep(0.15, 0.9, sat);
      t = clamp(s*t, 0.0, params.desat);
      rgb = mix(rgb, vec3(cmax+cmin)/push.wb.rgb*.5, t);
      col += rgb * u;
      wgt += u;
    }
  }
  if(wgt == 0.0f) col = vec3(1.0);
  else col /= wgt;
  imageStore(img_out, opos, vec4(col, 1));
}
