#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

// global uniform stuff about image and roi
layout(std140, set = 0, binding = 0) uniform params_t
{
  roi_t ri;
  roi_t ro;
  float white;
} params;

layout(push_constant, std140) uniform push_t
{
  float white;
  uint filters;
} push;

layout( // input uint16 buffer rggb
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // output f16 buffer rgb
    set = 1, binding = 1
) uniform writeonly image2D img_out;

// demosaic reduced size. run on output dimensions, gather all colours from
// input buffer (this might be 3x3 for xtrans).
void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, params.ro.roi))) return;

  vec4 rgba;
  const float white = push.white * params.white;

  if(push.filters == 9)
  {
    float c0 = texelFetch(img_in, 3*ipos, 0).r;
    float c1 = texelFetch(img_in, 3*ipos+ivec2(0,1), 0).r;
    float c2 = texelFetch(img_in, 3*ipos+ivec2(0,2), 0).r;
    float c3 = texelFetch(img_in, 3*ipos+ivec2(1,0), 0).r;
    float c4 = texelFetch(img_in, 3*ipos+ivec2(1,1), 0).r;
    float c5 = texelFetch(img_in, 3*ipos+ivec2(1,2), 0).r;
    float c6 = texelFetch(img_in, 3*ipos+ivec2(2,0), 0).r;
    float c7 = texelFetch(img_in, 3*ipos+ivec2(2,1), 0).r;
    float c8 = texelFetch(img_in, 3*ipos+ivec2(2,2), 0).r;
    // this tries to ignore clipped pixels in the average
#if 1
    if(c1 >= white) c1 = c7;
    if(c7 >= white) c7 = c1;
    if(c3 >= white) c3 = c5;
    if(c5 >= white) c5 = c3;
    float ming = min(min(min(c0, c2), c4), min(c6, c8));
    float maxg = max(max(max(c0, c2), c4), max(c6, c8));
    // if(ming < .5*white)
    // {
    // if(c0 >= white) c0 = ming;
    // if(c2 >= white) c2 = ming;
    // if(c4 >= white) c4 = ming;
    // if(c6 >= white) c6 = ming;
    // if(c8 >= white) c8 = ming;
    // }
    // at least make sure we don't blur bogus colours
    if(maxg >= white)
      c0 = c2 = c4 = c6 = c8 = 2*push.white;
#endif
    vec2 col = vec2((c1 + c7)*0.5, (c3 + c5)*.5);
    if(((ipos.x + ipos.y) & 1) > 0)
      rgba.rb = col;
    else
      rgba.br = col;
    rgba.g = (c0 + c2 + c4 + c6 + c8)*1.0/5.0;
    rgba.a = 1.0;
  }
  else
  {
    vec4 c = textureGather(img_in, 2*(ipos+.5)/vec2(params.ri.full), 0);
    if(c.x >= white) c.x = c.z;
    if(c.z >= white) c.z = c.x;
    rgba = vec4(c.w, (c.x+c.z)/2.0, c.y, 1.0);
  }
  imageStore(img_out, ipos, rgba);
}
