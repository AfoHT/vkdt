#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

// global uniform stuff about image and roi
layout(std140, set = 0, binding = 0) uniform params_t
{
  roi_t ri;
  roi_t rc;
  roi_t ro;
  float white;
} params;

layout(push_constant, std140) uniform push_t
{
  float white;
  float black;
  uint filters;
} push;

layout( // input uint16 buffer rggb
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // input f16 buffer rgb
    set = 1, binding = 1
) uniform sampler2D img_coarse;

layout( // output f16 buffer rggb
    set = 1, binding = 2
) uniform writeonly image2D img_out;

// upsample back to mosaic. this is either 3x3 or 2x2, depending on filters.
// runs on coarse resolution.
void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, params.ri.roi))) return;

  vec3 upsm = texelFetch(img_coarse, ipos, 0).rgb;
  const float white = -1.0;// XXX push.white * params.white;

  if(push.filters == 9)
  {
    // upsm.r = upsm.b = 1.2*upsm.b;// = upsm.g;
    // swap red and blue channels according to sensor layout
    if(((ipos.x + ipos.y) & 1) == 0)
      upsm.rgb = upsm.bgr;
    // get original input texels
    float c0 = texelFetch(img_in, 3*ipos, 0).r;
    float c1 = texelFetch(img_in, 3*ipos+ivec2(0,1), 0).r;
    float c2 = texelFetch(img_in, 3*ipos+ivec2(0,2), 0).r;
    float c3 = texelFetch(img_in, 3*ipos+ivec2(1,0), 0).r;
    float c4 = texelFetch(img_in, 3*ipos+ivec2(1,1), 0).r;
    float c5 = texelFetch(img_in, 3*ipos+ivec2(1,2), 0).r;
    float c6 = texelFetch(img_in, 3*ipos+ivec2(2,0), 0).r;
    float c7 = texelFetch(img_in, 3*ipos+ivec2(2,1), 0).r;
    float c8 = texelFetch(img_in, 3*ipos+ivec2(2,2), 0).r;
    float minr = min(c1, c7);
    float minb = min(c3, c5);
    float ming = min(min(min(c0, c2), c4), min(c6, c8));
    float scale = 1.0f;
    // scale = (ming-push.black)/(upsm.g-push.black);
#if 0 // XXX DEBUG
    if(minr < ming)
    {
      if(minb < minr) scale = minb/upsm.b;
      else            scale = minr/upsm.r;
    }
    else
    {
      if(minb < ming) scale = minb/upsm.b;
      else            scale = ming/upsm.g;
    }
#endif
    // replace clipped pixels by scaled counterparts
    if(c1 >= white) c1 = push.black + (upsm.r - push.black) * scale;
    if(c7 >= white) c7 = push.black + (upsm.r - push.black) * scale;
    if(c3 >= white) c3 = push.black + (upsm.b - push.black) * scale;
    if(c5 >= white) c5 = push.black + (upsm.b - push.black) * scale;
    if(c0 >= white) c0 = push.black + (upsm.g - push.black) * scale;
    if(c2 >= white) c2 = push.black + (upsm.g - push.black) * scale;
    if(c4 >= white) c4 = push.black + (upsm.g - push.black) * scale;
    if(c6 >= white) c6 = push.black + (upsm.g - push.black) * scale;
    if(c8 >= white) c8 = push.black + (upsm.g - push.black) * scale;
    // XXX want headroom but can't scale c (because blackpoint not subtracted)
    imageStore(img_out, 3*ipos,            vec4(vec3(c0), 1));
    imageStore(img_out, 3*ipos+ivec2(0,1), vec4(vec3(c1), 1));
    imageStore(img_out, 3*ipos+ivec2(0,2), vec4(vec3(c2), 1));
    imageStore(img_out, 3*ipos+ivec2(1,0), vec4(vec3(c3), 1));
    imageStore(img_out, 3*ipos+ivec2(1,1), vec4(vec3(c4), 1));
    imageStore(img_out, 3*ipos+ivec2(1,2), vec4(vec3(c5), 1));
    imageStore(img_out, 3*ipos+ivec2(2,0), vec4(vec3(c6), 1));
    imageStore(img_out, 3*ipos+ivec2(2,1), vec4(vec3(c7), 1));
    imageStore(img_out, 3*ipos+ivec2(2,2), vec4(vec3(c8), 1));
  }
  else
  {
    // reads : w z -> r g
    //         x y    g b
    vec4 c = textureGather(img_in, 2*(ipos+.5)/vec2(params.ri.full), 0);
    float ming = min(c.x, c.z);
    float scale = 1.0f;
#if 1 // XXX DEBUG
    if(c.w < ming)
    {
      if(c.y < c.w) scale = (c.y-push.black)/(upsm.b-push.black);
      else          scale = (c.w-push.black)/(upsm.r-push.black);
    }
    else
    {
      if(c.y < ming) scale = (c.y -push.black)/(upsm.b-push.black);
      else           scale = (ming-push.black)/(upsm.g-push.black);
    }
#endif
    if(c.x >= white) c.x = push.black + scale * (upsm.g-push.black);
    if(c.y >= white) c.y = push.black + scale * (upsm.b-push.black);
    if(c.z >= white) c.z = push.black + scale * (upsm.g-push.black);
    if(c.w >= white) c.w = push.black + scale * (upsm.r-push.black);
    // c = upsm.gbgr; // XXX DEBUG
    // XXX FIXME: i think we don't want to write these in ui16 or unnormalised f16, since we'll blow out
    // the highlights exceeding the 0x10000 number range!
    imageStore(img_out, 2*ipos,            vec4(c.w));
    imageStore(img_out, 2*ipos+ivec2(1,0), vec4(c.z));
    imageStore(img_out, 2*ipos+ivec2(0,1), vec4(c.x));
    imageStore(img_out, 2*ipos+ivec2(1,1), vec4(c.y));
  }
}
