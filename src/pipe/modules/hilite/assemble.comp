#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

// global uniform stuff about image and roi
layout(std140, set = 0, binding = 0) uniform params_t
{
  roi_t ri; // fine scale
  roi_t rc; // coarse scale
  roi_t ro; // output
} params;

layout(push_constant, std140) uniform push_t
{
  float white;
  uint filters;
} push;

layout( // input f16 buffer, original input at fine level
    set = 1, binding = 0
) uniform sampler2D img_input;

layout( // coarse f16 buffer
    set = 1, binding = 1
) uniform sampler2D img_coarse;

layout( // output fine resolution
    set = 1, binding = 2
) uniform writeonly image2D img_out;


vec3 gauss_expand(sampler2D img_in, ivec2 opos)
{
  vec3 c = vec3(0.0f);
  const float w[5] = {1.0f/16.0f, 4.0f/16.0f, 6.0f/16.0f, 4.0f/16.0f, 1.0f/16.0f};
  ivec2 ipos = opos/2;
  const int d = (opos.x&1) + 2*(opos.y&1);
  if(d == 0)
  { // both are even, 3x3 stencil
    for(int ii=-1;ii<=1;ii++) for(int jj=-1;jj<=1;jj++)
      c += texelFetch(img_in, ipos+ivec2(ii,jj), 0).rgb * w[2*jj+2]*w[2*ii+2];
  }
  else if(d == 1)
  { // i is odd, 2x3 stencil
    for(int ii=0;ii<=1;ii++) for(int jj=-1;jj<=1;jj++)
      c += texelFetch(img_in, ipos+ivec2(ii,jj), 0).rgb * w[2*jj+2]*w[2*ii+1];
  }
  else if(d == 2)
  { // j is odd, 3x2 stencil
    for(int ii=-1;ii<=1;ii++) for(int jj=0;jj<=1;jj++)
      c += texelFetch(img_in, ipos+ivec2(ii,jj), 0).rgb * w[2*jj+1]*w[2*ii+2];
  }
  else // d == 3
  { // both are odd, 2x2 stencil
    for(int ii=0;ii<=1;ii++) for(int jj=0;jj<=1;jj++)
      c += texelFetch(img_in, ipos+ivec2(ii,jj), 0).rgb * w[2*jj+1]*w[2*ii+1];
  }
  return 4.0f*c;
}

// assemble
void
main()
{
  ivec2 opos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(opos, params.ri.roi))) return;

  // upsample img_coarse
  vec3 upsm = gauss_expand(img_coarse, opos);
  // fetch input pixel
  vec3 fine = texelFetch(img_input, opos, 0).rgb;

  // rescale upsampled values to match unclipped values in fine
  // this is risky because min might be close to black/0 so it may be unstable:
  float scale = 1.0f;
  if(fine.r < fine.g)
  {
    if(fine.b < fine.r) scale = fine.b/upsm.b;
    else                scale = fine.r/upsm.r;
  }
  else
  {
    if(fine.b < fine.g) scale = fine.b/upsm.b;
    else                scale = fine.g/upsm.g;
  }
  vec3 rec = upsm * scale;
  // only overwrite clipped in fine
  if(fine.r >= push.white) fine.r = rec.r;
  if(fine.g >= push.white) fine.g = rec.g;
  if(fine.b >= push.white) fine.b = rec.b;
  imageStore(img_out, opos, vec4(fine, 1));
}

