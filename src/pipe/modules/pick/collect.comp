#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 1) uniform params_t
{
  uvec4 nspots;
  vec4 spot[20];
  float picked[60]; // actually 3-strided colours
} params;


layout( // input buffer
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // output picked colour buffer
    set = 1, binding = 1, r32ui
) uniform uimage2D img_out;

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, textureSize(img_in, 0)))) return;

  for(int i=0;i<params.nspots.x;i++)
  {
    uvec4 aabb = uvec4(params.spot[i] * textureSize(img_in, 0).xxyy);

    float cnt = (aabb.y - aabb.x)*(aabb.w - aabb.z);
    float scale = (1<<30)/cnt;

    // check whether we're inside the 2D AABB
    if(ipos.x >= aabb.x && ipos.x < aabb.y &&
       ipos.y >= aabb.z && ipos.y < aabb.w)
    {
      vec3 rgb = texelFetch(img_in, ipos, 0).rgb;
      imageAtomicAdd(img_out, ivec2(i, 0), uint(scale * (rgb.r + 0.5) * 0.5 + 0.5));
      imageAtomicAdd(img_out, ivec2(i, 1), uint(scale * (rgb.g + 0.5) * 0.5 + 0.5));
      imageAtomicAdd(img_out, ivec2(i, 2), uint(scale * (rgb.b + 0.5) * 0.5 + 0.5));
    }
  }
}

