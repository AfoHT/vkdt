#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(push_constant, std140) uniform push_t
{
  uint filters;
} push;


layout( // input f16 buffer y
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // output f16 buffer rgb
    set = 1, binding = 1
) uniform writeonly image2D img_out;



// demosaic reduced size. run on output dimensions, gather all colours from
// input buffer (this might be 3x3 for xtrans).
void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  float g01 = texelFetch(img_in, ipos+ivec2(-1, 0), 0).r;
  float g10 = texelFetch(img_in, ipos+ivec2( 0,-1), 0).r;
  float g12 = texelFetch(img_in, ipos+ivec2( 0, 1), 0).r;
  float g21 = texelFetch(img_in, ipos+ivec2( 1, 0), 0).r;
  // [Wronsky 2019]
  // they claim they have 4 gradient estimates, not sure if total or for each of x,y.
  // anyways i don't see it since g21 - g11 + g10 + g11 is just one sample.
  // if at all we can try 3 for each of x,y.
  float Ix =   (g12 - g10);
  float Iy = - (g21 - g01);

  mat2 M = mat2(Ix*Ix, Ix*Iy, Ix*Iy, Iy*Iy);
  vec2 eval, evec0, evec1;
  evd2x2(eval, evec0, evec1, M);
  // XXX limit anisotropy of reconstruction. we probably only want
  // XXX to do this in case there is a lot of noise (so we don't trust the estimation)
  // TODO: figure out uncertainty here if there's known variance on g**).
  // eval.y = max(eval.y, eval.x*0.6);
  imageStore(img_out, ipos, vec4(eval, evec0));
}
