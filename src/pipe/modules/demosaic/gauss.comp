#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

// global uniform stuff about image and roi
layout(std140, set = 0, binding = 0) uniform params_t
{
  roi_t ri;
  roi_t ro;
  uint filters;
} params;


layout( // input f32 buffer y
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // output f32 buffer rgb
    set = 1, binding = 1, rgba32f
) uniform image2D img_out;


// (c) christoph peters:
void svd2x2(
    out vec2 eval,
    out vec2 evec0,
    out vec2 evec1,
    mat2 M)
{
	// Define some short hands for the matrix entries
	float a = M[0][0];
	float b = M[1][0];
	float c = M[1][1];
	// Compute coefficients of the characteristic polynomial
	float pHalf = -0.5 * (a + c);
	float q = a*c - b*b;
	// Solve the quadratic
	float discriminant_root = sqrt(pHalf * pHalf - q);
	eval.x = -pHalf + discriminant_root;
	eval.y = -pHalf - discriminant_root;
	// Subtract a scaled identity matrix to obtain a rank one matrix
	float a0 = a - eval.x;
	float b0 = b;
	float c0 = c - eval.x;
	// The column space of this matrix is orthogonal to the first eigenvector 
	// and since the eigenvectors are orthogonal themselves, it agrees with the 
	// second eigenvector. Pick the longer column to avoid cancellation.
	float squaredLength0 = a0*a0 + b0*b0;
	float squaredLength1 = b0*b0 + c0*c0;
	float squaredLength;
	if (squaredLength0 > squaredLength1)
  {
		evec1.x = a0;
		evec1.y = b0;
		squaredLength = squaredLength0;
	}
	else {
		evec1.x = b0;
		evec1.y = c0;
		squaredLength = squaredLength1;
	}
	// If the eigenvector is exactly zero, both eigenvalues are the same and the 
	// choice of orthogonal eigenvectors is arbitrary
	evec1.x = (squaredLength == 0.0) ? 1.0 : evec1.x;
	squaredLength = (squaredLength == 0.0) ? 1.0 : squaredLength;
	// Now normalize
	float invLength = 1.0 / sqrt(squaredLength);
	evec1.x *= invLength;
	evec1.y *= invLength;
	// And rotate to get the other eigenvector
	evec0.x =  evec1.y;
	evec0.y = -evec1.x;
}


// demosaic reduced size. run on output dimensions, gather all colours from
// input buffer (this might be 3x3 for xtrans).
void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, params.ro.roi))) return;

  float g00 = texelFetch(img_in, ipos+ivec2(-1,-1), 0).r;
  float g01 = texelFetch(img_in, ipos+ivec2(-1, 0), 0).r;
  float g02 = texelFetch(img_in, ipos+ivec2(-1, 1), 0).r;
  float g10 = texelFetch(img_in, ipos+ivec2( 0,-1), 0).r;
  float g11 = texelFetch(img_in, ipos+ivec2( 0, 0), 0).r;
  float g12 = texelFetch(img_in, ipos+ivec2( 0, 1), 0).r;
  float g20 = texelFetch(img_in, ipos+ivec2( 1,-1), 0).r;
  float g21 = texelFetch(img_in, ipos+ivec2( 1, 0), 0).r;
  float g22 = texelFetch(img_in, ipos+ivec2( 1, 1), 0).r;
  vec2 var = (g00-g11)*vec2(-1,-1)*vec2(-1,-1) +
             (g01-g11)*vec2(-1, 0)*vec2(-1, 0) +
             (g02-g11)*vec2(-1, 1)*vec2(-1, 1) +
             (g10-g11)*vec2( 0,-1)*vec2( 0,-1) +
             (g11-g11)*vec2( 0, 0)*vec2( 0, 0) +
             (g12-g11)*vec2( 0, 1)*vec2( 0, 1) +
             (g20-g11)*vec2( 1,-1)*vec2( 1,-1) +
             (g21-g11)*vec2( 1, 0)*vec2( 1, 0) +
             (g22-g11)*vec2( 1, 1)*vec2( 1, 1);
  float cov= (g00-g11)*-1*-1 +
             (g01-g11)*-1* 0 +
             (g02-g11)*-1* 1 +
             (g10-g11)* 0*-1 +
             (g11-g11)* 0* 0 +
             (g12-g11)* 0* 1 +
             (g20-g11)* 1*-1 +
             (g21-g11)* 1* 0 +
             (g22-g11)* 1* 1;
  cov = 0.0;
  mat2 M = mat2(var.x, cov, cov, var.y);
  vec2 eval, evec0, evec1;
  svd2x2(eval, evec0, evec1, M);
  // imageStore(img_out, ipos, vec4(var, cov, 1.0));
  imageStore(img_out, ipos, vec4(65535*(evec0+1.0), 10.0*eval.x, 1.0));
}

#if 0
void
estimate_covariance()
{
  // this kernel is called with roi on low res:
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, params.ro.roi))) return;

  // TODO: construct matrix, do SVD, clamp eigenvalues, write back
  imageStore(img_cov, ipos, vec4(var, cov, 1.0));
}

void
gather()
{
  // this kernel is called with roi on high res:
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, params.ro.roi))) return;

  // TODO: make sure we have an interpolating/magnifying image sampler!
  vec2 tc = vec2(ipos) / vec2(params.ro.roi);
  vec4 cov = texture(img_cov, tc);

  vec4 rgba;
  imageStore(img_out, ipos, rgba);
}
#endif
