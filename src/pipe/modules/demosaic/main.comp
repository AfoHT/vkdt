#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(push_constant, std140) uniform IterationInfo {
  uint iteration;
} push;

// TODO: put in external header (can we share with host?)
struct roi_t
{
  ivec2 full;
  ivec2 roi;
  ivec2 off;
  float scale;
};

// TODO: global uniform stuff about image and roi
layout(set = 0, binding = 0) uniform params_t {
  roi_t ri;
  roi_t ro;
  int filters;
} params;


layout( // input uint16 buffer rggb
    set = 0, binding = 1
) uniform usampler2D img_in; // would be sampler2D for f32

layout( // output f32 buffer rgb
    set = 0, binding = 2, rgba32f
) uniform image2D img_out;

// #define GLOBAL_UBO_DESC_SET_IDX 0
// #include "global_ubo.h"

// #define GLOBAL_TEXTURES_DESC_SET_IDX 1
// #include "global_textures.h"

// #include "utils.glsl"
// #include "asvgf.glsl"


// demosaic reduced size. run on output dimensions, gather all colours from
// input buffer (this might be 3x3 for xtrans).
void
main()
{
  // TODO: use roi info once we have uniform bufers!
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  // if(any(greaterThanEqual(ipos, params.ro.roi))) return;

  // TODO: do something clever with filters etc
  // uvec4 rgba = texelFetch(img_in, 2*ipos, 0);
  uvec4 rgba = texelFetch(img_in, 2*ipos, 0);
  vec4 outc = rgba * vec4(1.0/65535.0);
  imageStore(img_out, ipos, outc);
}

