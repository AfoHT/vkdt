#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 1) uniform params_t
{
  uint filters;
} params;


layout( // input uint16 buffer rggb
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // input f16 buffer rgb gaussian covariance
    set = 1, binding = 1
) uniform sampler2D img_gauss;

layout( // output f16 buffer rgb
    set = 1, binding = 2
) uniform writeonly image2D img_out;

void
eval_gauss(
    vec3 cov, ivec2 o,
    out float col,
    out float weight)
{
  ivec2 opos = ivec2(gl_GlobalInvocationID);
  ivec2 pos = opos+o;
  // TODO: coalesce texture fetches in a 2x2 block using textureGather?
  col = texelFetch(img_in, pos, 0).r;

  // eval gauss:
  mat2 E = mat2(cov.x, -cov.y, cov.y, cov.x);
  vec2 of = E * vec2(o);
  // XXX normalise or not?
  float scale = 4.0;//0.01;
  float so = 1.0;
  scale = clamp(scale*cov.z, 0.01, 100);
  weight = //1.0/(2.0*3.1415692)*so/(cov.z) *
    exp(-0.5*dot(of, vec2(1./(scale*scale), so) * of));
#if 0 // DEBUG: visualise gaussian splats
      if(pos.x % 10 == 0 && pos.y % 10 == 0)
      {
        rgb = vec3(0.0, 10000.0*weight, 0.0);
        imageStore(img_out, opos, vec4(rgb, 1.0));
        return;
      }
#endif
}

void write_xtrans(
    ivec2 o,
    float col,
    float weight,
    inout vec3 rgb,
    inout vec3 w)
{
  ivec2 pos = ivec2(gl_GlobalInvocationID)+o;
  if(o == ivec2(0)) weight *= 2;
  col *= weight;
  // rgb from pattern:
  bool blue_top = ((pos.x/3 + pos.y/3) & 1) > 0;
  pos = pos - (pos/3)*3;
  if(((pos.x + pos.y) & 1) == 0)
  {
    rgb.g += col;
    w.g += weight;
  }
  else if(blue_top ^^ (pos.y == 1))
  {
    rgb.b += col;
    w.b += weight;
  }
  else
  {
    rgb.r += col;
    w.r += weight;
  }
}

void write_bayer(
    ivec2 o,
    float col,
    float weight,
    inout vec3 rgb,
    inout vec3 w)
{
  ivec2 pos = ivec2(gl_GlobalInvocationID)+o;
  if(o == ivec2(0)) weight = 100000.0;
  col *= weight;
  if((((pos.x & 1) == 0) && ((pos.y & 1) == 1)) ||
     (((pos.x & 1) == 1) && ((pos.y & 1) == 0)))
  { // green
    rgb.g += col;
    w.g += weight;
  }
  else if(((pos.x & 1) == 0) && ((pos.y & 1) == 0))
  { // red
    rgb.r += col;
    w.r += weight;
  }
  else if(((pos.x & 1) == 1) && ((pos.y & 1) == 1))
  { // blue
    rgb.b += col;
    w.b += weight;
  }
}

void
main()
{
  ivec2 opos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(opos, imageSize(img_out)))) return;

  // x trans looks like:
  // . r . . b .
  // b . b r . r
  // . r . . b .
  // . b . . r .
  // r . r b . b
  // . b . . r .
  // so green needs a splat radius of 1, blue/red need 2
  // bayer looks like:
  // r .
  // . b
  vec3 rgb = vec3(0.0);
  vec3 w   = vec3(0.0);

  // TODO: this filter is insanely slow. i guess unroll the loop etc would help,
  // TODO: or just consider a few selected nb for blurring (instead the full 25)


  if(params.filters == 9)
  { // x-trans
    // pulling this one out of the loop goes down from 2ms -> 1.6ms on intel and
    // doesn't look much worse :/
    // vec3 cov = texelFetch(img_gauss, opos/3+vec2(.5,.5), 0).rgb;
    vec3 cov = textureLod(img_gauss, vec2(opos/3.0/textureSize(img_gauss, 0)), 0).rgb;
    // unrolling this loop manually results in a perf drop 1.6ms -> 3.3ms
    for(int j=-2;j<=2;j++) for(int i=-2;i<=2;i++)
    {
      float col, weight;
      eval_gauss(cov, ivec2(i, j), col, weight);
      write_xtrans(ivec2(i, j), col, weight, rgb, w);
    }
    // TODO: instead of the general slow loop above, use known stencils:
    // rb:
    // 1) center of X cross, require only 4 nb top/down left/right
    // 2) center of square block, require four X with 8 nb
    // g:
    // 1) v block: 3nb top or bottom V A (maybe four?
    // 2) h block: 3nb left or right < >
    // since this has a shitton of branches, try to run the kernel on /3 size
    // and compute the output for the whole block one by one
    // this would of course make super resolution harder.

    // also try:
    // collapse each X to one quad (weight the center with 1/20 vs 1/5 to each corner)
    // use this green only 2/3 downsized buffer instead of the /3 buffer to detect edge orientation
  }
  else
  { // bayer
    // vec3 cov = texelFetch(img_gauss, opos/2, 0).rgb;
    vec3 cov = textureLod(img_gauss, vec2(opos/2.0/textureSize(img_gauss, 0)), 0).rgb;
    for(int j=-1;j<=1;j++) for(int i=-1;i<=1;i++)
    {
      float col, weight;
      eval_gauss(cov, ivec2(i, j), col, weight);
      write_bayer(ivec2(i, j), col, weight, rgb, w);
    }
  }

#if 0
  eval_gauss(cov, ivec2(-2, -2), rgb, w);
  eval_gauss(cov, ivec2(-1, -2), rgb, w);
  eval_gauss(cov, ivec2( 0, -2), rgb, w);
  eval_gauss(cov, ivec2( 1, -2), rgb, w);
  eval_gauss(cov, ivec2( 2, -2), rgb, w);
  eval_gauss(cov, ivec2(-2, -1), rgb, w);
  eval_gauss(cov, ivec2(-1, -1), rgb, w);
  eval_gauss(cov, ivec2( 0, -1), rgb, w);
  eval_gauss(cov, ivec2( 1, -1), rgb, w);
  eval_gauss(cov, ivec2( 2, -1), rgb, w);
  eval_gauss(cov, ivec2(-2,  0), rgb, w);
  eval_gauss(cov, ivec2(-1,  0), rgb, w);

  eval_gauss(cov, ivec2( 0,  0), rgb, w);

  eval_gauss(cov, ivec2( 1,  0), rgb, w);
  eval_gauss(cov, ivec2( 2,  0), rgb, w);
  eval_gauss(cov, ivec2(-2,  1), rgb, w);
  eval_gauss(cov, ivec2(-1,  1), rgb, w);
  eval_gauss(cov, ivec2( 0,  1), rgb, w);
  eval_gauss(cov, ivec2( 1,  1), rgb, w);
  eval_gauss(cov, ivec2( 2,  1), rgb, w);
  eval_gauss(cov, ivec2(-2,  2), rgb, w);
  eval_gauss(cov, ivec2(-1,  2), rgb, w);
  eval_gauss(cov, ivec2( 0,  2), rgb, w);
  eval_gauss(cov, ivec2( 1,  2), rgb, w);
  eval_gauss(cov, ivec2( 2,  2), rgb, w);
#endif
  rgb /= w;

  // TODO: the radius should be specific to colour/green and bayer/xtrans!
  // TODO: get uint16 bayer pixel in certain environment
  // TODO: get downsampled gaussian covariance (use linear interpolation!)
  // splat

  imageStore(img_out, opos, vec4(rgb, 1.0));
}
