#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

// layout(std140, set = 0, binding = 1) uniform params_t
// {
// } params;

layout( // input
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // output
    set = 1, binding = 1
) uniform writeonly image2D img_out;

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  vec3 rgb = vec3(0, 0, 0);
  rgb.rg = sample_soft(img_in, (ipos+.5)/vec2(textureSize(img_in, 0))).rg*0.1;
  // vec3 rgb = texelFetch(img_in, ipos, 0).rg * 1;///2.0;// * 0.05;
  rgb = clamp((vec3(1.0) + rgb)*.5, vec3(0.0), vec3(1.0));
  // rgb = clamp(abs(rgb), vec3(0.0), vec3(1.0));
  imageStore(img_out, ipos, vec4(rgb, 1));
}

