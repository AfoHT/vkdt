#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 0) uniform global_t
{
  uint frame;
} global;

// global uniform stuff about image and roi
layout(std140, set = 0, binding = 1) uniform params_t
{
  int filters;
  float opacity;
  float black;
  float white;
  float noise_a;
  float noise_b;
  float taa_thrs;
} params;

layout( // input back buffer
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // new top layer
    set = 1, binding = 1
) uniform sampler2D img_top;

layout( // mask (single channel)
    set = 1, binding = 2
) uniform sampler2D img_mask;

layout( // output
    set = 1, binding = 3
) uniform writeonly image2D img_out;

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  vec3 bck   = texelFetch(img_in,   ipos, 0).rgb;
  vec3 rgb   = texelFetch(img_top,  ipos, 0).rgb;
  float mask = texture(img_mask, (ipos+0.5)/vec2(imageSize(img_out))).r;
  // float mask = sample_semisoft(img_mask, (ipos+0.5)/vec2(imageSize(img_out))).r;
  // float mask = sample_soft(img_mask, (ipos+0.5)/vec2(imageSize(img_out))).r;
  float t = clamp(params.opacity*(1.0-mask), 0, 1);

  if(params.taa_thrs == 0.0)
  { // explicitly don't want taa
    rgb = mix(rgb, bck, t);
  }
  else
  {
    // use TAA style box clamping
    // estimate variance from spatial neighbours.
    // this works best for real time anti aliasing, since it will increase
    // the threshold near edges and thus blur more there. for photography,
    // arguably we want the opposite behaviour.
    vec3 mom1 = vec3(0.0f);
    vec3 mom2 = vec3(0.0f);
    const int r = 1;
    for(int yy = -r; yy <= r; yy++) {
      for(int xx = -r; xx <= r; xx++) {
        vec3 c = texelFetch(img_top, ipos + ivec2(xx, yy), 0).rgb;
        mom1 += c;
        mom2 += c * c;
      }
    }
    mom1 /= (2.0 * r + 1) * (2.0 * r + 1);
    mom2 /= (2.0 * r + 1) * (2.0 * r + 1);

    vec3 s2 = max(vec3(0), mom2 - mom1 * mom1);
    vec3 sigma = sqrt(s2);
    const float thresh = params.taa_thrs;// * mask;
    bck = clamp(bck, max(vec3(0), mom1 - thresh * sigma), mom1 + thresh * sigma);
    rgb = mix(rgb, bck, params.opacity);
  }

  imageStore(img_out, ipos, vec4(rgb, 1));
}

