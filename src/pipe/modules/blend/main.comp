#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 0) uniform global_t
{
  uint frame;
} global;

// global uniform stuff about image and roi
layout(std140, set = 0, binding = 1) uniform params_t
{
  float mode;
  float opacity;
} params;

layout( // input back buffer
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // new top layer
    set = 1, binding = 1
) uniform sampler2D img_top;

layout( // mask (single channel)
    set = 1, binding = 2
) uniform sampler2D img_mask;

layout( // output
    set = 1, binding = 3
) uniform writeonly image2D img_out;

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  vec3 bck   = texelFetch(img_in,   ipos, 0).rgb;
  vec3 rgb   = texelFetch(img_top,  ipos, 0).rgb;
  float mask = texelFetch(img_mask, ipos, 0).r;
  // TODO: switch based on mode, implement blend modes
  if(global.frame > 0) rgb = mix(rgb, mix(rgb, bck, mask), params.opacity);
  imageStore(img_out, ipos, vec4(rgb, 1));
}

