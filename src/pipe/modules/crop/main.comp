#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

// global uniform stuff about image and roi
layout(std140, set = 0, binding = 0) uniform params_t
{
  roi_t ri;
  roi_t ro;
  float h00, h01, h02, h10, h11, h12, h20, h21, h22;
} params;


layout( // input f32 buffer rgb
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // output f32 buffer rgb
    set = 1, binding = 1, rgba32f
) uniform image2D img_out;

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, params.ro.roi))) return;

  vec2 xy = vec2(ipos.xy);
  vec2 rd = vec2(
      (params.h00*xy.x + params.h01*xy.y + params.h02)/
      (params.h20*xy.x + params.h21*xy.y + params.h22),
      (params.h10*xy.x + params.h11*xy.y + params.h12)/
      (params.h20*xy.x + params.h21*xy.y + params.h22));
  // rounding texture access:
  // vec4 rgba = texelFetch(img_in, ivec2(rd+0.5), 0);
  // bilinear:
  // vec4 rgba = texture(img_in, rd/params.ri.roi);
  // catmull rom is a little slower (especially on intel) but results
  // in a bit more acuity:
  vec4 rgba = sample_catmull_rom(img_in, rd/params.ri.roi);
  imageStore(img_out, ipos, vec4(rgba.rgb, 1));
}

