#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 1) uniform params_t
{
  float strength;
  float chroma;
  float luma;
} params;

layout(push_constant, std140) uniform push_t
{
  vec4  wb;
  vec4  black;
  vec4  white;
  float noise_a;
  float noise_b;
  uint  filters;
} push;

// 5 input scales
layout( set = 1, binding = 0) uniform sampler2D img_s0; // original image
layout( set = 1, binding = 1) uniform sampler2D img_s1; // one downsampling step
layout( set = 1, binding = 2) uniform sampler2D img_s2; // ..
layout( set = 1, binding = 3) uniform sampler2D img_s3;
layout( set = 1, binding = 4) uniform sampler2D img_s4; // four downsampling steps

layout( // output
    set = 1, binding = 5
) uniform writeonly image2D img_out;

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  ivec2 sz = textureSize(img_s0, 0).xy;

  // go through all levels same as downsampling would, swizzling coordinates
  // on the go as done in down.comp. then pick up the scales accordingly.
  vec3 down4;
  // this is for srgb not rec2020, but whatever
  const mat3 rgb_to_yuv = mat3(
      0.299, -0.147, 0.615,
      0.587, -0.289, -0.515,
      0.114, 0.436, -0.100);
  vec3 orig = texelFetch(img_s0, ipos, 0).rgb;
  orig = (orig - push.black.rgb)/(push.white.rgb - push.black.rgb);
  orig = rgb_to_yuv * (orig * push.wb.rgb);
  { // scope for registers
    ivec2 esi = ipos;

    vec3 down0 = orig;
    // TODO: consider 2px padding radius for next iteration and mirror repeat!
    esi = esi / 2 + ivec2(esi.x & 1, esi.y & 1) * sz/2;
    vec3 down1 = texelFetch(img_s1, esi, 0).rgb;
    esi = esi / 2 + ivec2(esi.x & 1, esi.y & 1) * sz/2;
    vec3 down2 = texelFetch(img_s2, esi, 0).rgb;
    esi = esi / 2 + ivec2(esi.x & 1, esi.y & 1) * sz/2;
    vec3 down3 = texelFetch(img_s3, esi, 0).rgb;
    esi = esi / 2 + ivec2(esi.x & 1, esi.y & 1) * sz/2;
    down4 = texelFetch(img_s4, esi, 0).rgb;

    // compute wavelet coefficients for this pixel
    // normalise these by dividing out expected noise std dev:
    // our data is now normalised to [0, 1] already:
    // the noise model is  sigma^2 = a + x*b  where x is the uint16_t scale raw value minus the raw black level.
    // this meas we have to re-scale our normalised value to the previous white level.
    const float scale = 65535.0*(push.white.g-push.black.g);
    const float sigma = sqrt(push.noise_a + scale*max(down2.x, 0.0)*push.noise_b)/scale;
    // Var(aX) = a^2 * Var(X), so the factors of our filter taps come in squared here:
    // var band = 
    //  (t*t + (1.0-t)*(1.0-t)*4.0/16.0*(
    //  0.2*0.4*0.2*0.4 + 0.2*0.6*0.2*0.6 + 0.8*0.4*0.8*0.4 + 0.8*0.6*0.8*0.6)) * base var
    // => sigma' ~= 0.29165 * base sigma
    // mosaiced images are preprocessed by averaging a block of greens.
    // for xtrans these are 5 greens, so std dev / sqrt(5), bayer / sqrt(2):
    float block = push.filters == 0u ? 1.0 : (push.filters == 9u ? 2.23607 : 1.414213);
    const float b0 = 1.0/block;
    const float b1 = 0.291652/block;
    const float b2 = 0.085061/block;
    const float b3 = 0.024808/block;
    down0 = (down0 - down1)/(sigma*b0);
    down1 = (down1 - down2)/(sigma*b1);
    down2 = (down2 - down3)/(sigma*b2);
    down3 = (down3 - down4)/(sigma*b3);

    // TODO: downweight coarser scales:
    // xi-squared statistic for iid unit variance:
    float xi2 = abs(down0.x*down0.x + down1.x*down1.x + down2.x*down2.x + down3.x*down3.x - 4.0); // * (n-1) = 3 really
    // TODO: compute true probability that these are indeed iid wrt some p value
    // (we are currently using same fake gaussian instead of a xi^2 statistic)

    // wavelet shrinkage and re-assembly:
    // float test = exp(- 0.001*sqrt(xi2)); // fake Xi2
    float test = exp(- 0.008*sqrt(xi2)); // fake Xi2
    // bayes shrink would be T = sigma_noise^2 / sigma_signal
    // maybe consider that sigma_channel^2 scales as 1/f^2 with frequency f for natural images?
    // we assume sigma_noise = frac * sigma_signal and cancel the two.
    // since we rescaled the bands to unit noise variance, the threshold is
    // just a (user) constant and the edge shielding term:
    vec3 thrs = vec3(1.0, 10.0*params.chroma, 10.0*params.chroma) * (params.strength * 3.0) * test;
    down4 += sigma * b3 * sign(down3) * max(abs(down3) - thrs, vec3(0.0));
    down4 += sigma * b2 * sign(down2) * max(abs(down2) - thrs, vec3(0.0));
    down4 += sigma * b1 * sign(down1) * max(abs(down1) - thrs, vec3(0.0));
    down4 += sigma * b0 * sign(down0) * max(abs(down0) - thrs, vec3(0.0));
    // down4 = vec3(test, 0.0, 0.0); // visualise edge stopping
  }

  down4.x = mix(orig.x, down4.x, params.luma);
  vec3 rgb = max(vec3(0), (inverse(rgb_to_yuv) * down4) / push.wb.rgb);

  imageStore(img_out, ipos, vec4(rgb, 1));
}

