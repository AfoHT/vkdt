#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable
#extension GL_EXT_ray_tracing             : enable
#extension GL_EXT_ray_query               : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 0) uniform global_t
{ 
  int frame;
} global;

layout(std140, set = 0, binding = 1) uniform params_t
{ 
  vec4 cam_x;
  vec4 cam_w;
  int spp;
} params;

layout(push_constant, std140) uniform push_t
{
  uint first_skybox;
} push;

layout( // output f16 buffer rgb
    set = 1, binding = 0
) uniform writeonly image2D img_out;

layout(std430, set = 1, binding = 1) buffer sssbo_t
{
  uint v[]; // extra geo info for static geo
} stcssbo;

layout(std430, set = 1, binding = 2) buffer dssbo_t
{
  uint v[]; // extra geo info for dynamic geo
} dynssbo;

layout(
    set = 1, binding = 3
) uniform sampler2D img_tex[];

layout(
    set = 1, binding = 4
) uniform sampler2D img_blue;

layout(
    set = 1, binding = 5
) uniform writeonly image2D img_aov;

layout(set = 2, binding = 0) uniform accelerationStructureEXT rt_accel;

layout(set = 2, binding = 1) buffer buf_vtx_t
{ // 3x float vertex data for every instance
  float v[];
} buf_vtx[];

layout(set = 2, binding = 2) buffer buf_idx_t
{ // index data for every instance
  uint i[];
} buf_idx[];


#define M_PI   3.14159265358979323846
// importance sample the blackman harris pixel filter.
// has 1.5px radius support
vec2 filter_bh_sample(vec2 rand)
{
  vec2 res = vec2(cos(rand.y*M_PI*2.0), sin(rand.y*M_PI*2.0));
  float r = 0.943404 * asin(0.636617 * asin(sqrt(rand.x))); // surprisingly good fit to inverse cdf
  return res * r;
}


#if 0
float rand3(vec3 v) {
    return fract(sin(dot(v + vec3(-8.5123, 23.2156, 0.0), vec3(12.9898, 6.233, 0.84261))) * 47583.5453123);
}
float noise3lin(in vec3 uvx) {
    vec3 f = fract(uvx);
    vec3 i = floor(uvx);

    float a1 = rand3(i);
    float b1 = rand3(i + vec3(0.0, 1.0, 0.0));
    float c1 = rand3(i + vec3(1.0, 0.0, 0.0));
    float d1 = rand3(i + vec3(1.0, 1.0, 0.0));
    float a2 = rand3(i + vec3(0.0, 0.0, 1.0));
    float b2 = rand3(i + vec3(0.0, 1.0, 1.0));
    float c2 = rand3(i + vec3(1.0, 0.0, 1.0));
    float d2 = rand3(i + vec3(1.0, 1.0, 1.0));

    vec3 u = -2. * f * f * f + 3. * f * f;

    float a = mix(a1, a2, f.z);
    float b = mix(b1, b2, f.z);
    float c = mix(c1, c2, f.z);
    float d = mix(d1, d2, f.z);

    return mix(mix(a, b, u.y), mix(c, d, u.y), u.x);
}
float fbm3(in vec3 uvx) {
    float sum = 0.0;
    float amp = 0.0;
    float persistence = 0.7;
    vec3 stz = uvx;

    for (int i = 0; i < 8; ++i) {
        amp = amp / persistence + noise3lin(stz);
        sum = sum / persistence + 1.;
        stz *= 2.;
    }
    return amp / sum;
}
#endif

#if 1 // TODO: put stuff like this in montecarlo.glsl or so

// sample hemisphere, cos lobe, p = cos(theta)/pi
vec3 sample_cos(vec2 x)
{
  float su = sqrt(x.x);
  return vec3(su*cos(2.0*3.1415*x.y), su*sin(2.0*3.1415*x.y), sqrt(1.0 - x.x));
}

float mrand(inout uint seed)
{ // Algorithm "xor" from p. 4 of Marsaglia, "Xorshift RNGs"
  seed ^= seed << 13;
  seed ^= seed >> 17;
  seed ^= seed << 5;
  return seed / 4294967296.0;
}

vec4 xrand(inout uint seed, ivec2 p)
{
  // cp shift based on seed
  return mod(texelFetch(img_blue, p, 0) + vec4(mrand(seed), mrand(seed), mrand(seed), mrand(seed)), vec4(1.0));
}

#endif

// 32-bit normal encoding from Journal of Computer Graphics Techniques Vol. 3, No. 2, 2014
// A Survey of Efficient Representations for Independent Unit Vectors,
// almost like oct30
vec3 geo_decode_normal(const uint enc)
{
  vec2 projected = unpackSnorm2x16(enc); // -1..1
  vec3 vec = vec3(projected, 1.0-abs(projected.x)-abs(projected.y));
  if(vec.z < 0.0)
    vec.xy = vec2(
        (1.0 - abs(vec.y)) * (vec.x < 0.0 ? -1.0 : 1.0),
        (1.0 - abs(vec.x)) * (vec.y < 0.0 ? -1.0 : 1.0));
  return normalize(vec);
}

struct intersection_t
{
  // TODO: clean this up
  vec3 n;
  vec2 st;
  uint mat;
  uint matfb;
};

void prepare_intersection(
    rayQueryEXT rq,
    vec3 w,
    inout vec3 x,
    out vec3 n,
    out vec2 st,
    out uint mat,   // texture
    out uint matfb) // fullbright texture
{
  int instance_id = rayQueryGetIntersectionInstanceIdEXT(rq, true); // which of our ssbo
  int pi = rayQueryGetIntersectionPrimitiveIndexEXT(rq, true); // primitive inside instance
  vec3 b;
  b.yz = rayQueryGetIntersectionBarycentricsEXT(rq, true);
  b.x = 1.0-b.z-b.y;
  int i = 7*pi;
  vec3 n0, n1, n2;
  if(instance_id == 0)
  { // dyn geo
    mat   = dynssbo.v[i+6]&0xffff;
    matfb = dynssbo.v[i+6]>>16;
    n0 = geo_decode_normal(dynssbo.v[i+0]);
    n1 = geo_decode_normal(dynssbo.v[i+1]);
    n2 = geo_decode_normal(dynssbo.v[i+2]);
    if(dot(w,n0) > 0) n0 -= w*dot(w,n0);
    if(dot(w,n1) > 0) n1 -= w*dot(w,n1);
    if(dot(w,n2) > 0) n2 -= w*dot(w,n2);
    n = normalize(mat3(n0, n1, n2) * b);
    vec2 st0 = unpackHalf2x16(dynssbo.v[i+3]);
    vec2 st1 = unpackHalf2x16(dynssbo.v[i+4]);
    vec2 st2 = unpackHalf2x16(dynssbo.v[i+5]);
    st = mat3x2(st0, st1, st2) * b;
  }
  else
  { // static geo
    mat   = stcssbo.v[i+6]&0xffff;
    matfb = stcssbo.v[i+6]>>16;
    n0 = geo_decode_normal(stcssbo.v[i+0]);
    n1 = geo_decode_normal(stcssbo.v[i+1]);
    n2 = geo_decode_normal(stcssbo.v[i+2]);
    n = normalize(mat3(n0, n1, n2) * b);
    vec2 st0 = unpackHalf2x16(stcssbo.v[i+3]);
    vec2 st1 = unpackHalf2x16(stcssbo.v[i+4]);
    vec2 st2 = unpackHalf2x16(stcssbo.v[i+5]);
    st = mat3x2(st0, st1, st2) * b;
  }
#if 0 // fast and dirty:
  float t = rayQueryGetIntersectionTEXT(rq, true);
  x += t*w;
#else // more precise intersection point by using vertices + barycentrics
  uint i0 = buf_idx[instance_id].i[3*pi+0];
  uint i1 = buf_idx[instance_id].i[3*pi+1];
  uint i2 = buf_idx[instance_id].i[3*pi+2];
  vec3 v0 = vec3(
      buf_vtx[instance_id].v[3*i0+0],
      buf_vtx[instance_id].v[3*i0+1],
      buf_vtx[instance_id].v[3*i0+2]);
  vec3 v1 = vec3(
      buf_vtx[instance_id].v[3*i1+0],
      buf_vtx[instance_id].v[3*i1+1],
      buf_vtx[instance_id].v[3*i1+2]);
  vec3 v2 = vec3(
      buf_vtx[instance_id].v[3*i2+0],
      buf_vtx[instance_id].v[3*i2+1],
      buf_vtx[instance_id].v[3*i2+2]);
  x = mat3(v0, v1, v2) * b;
#endif
  if(instance_id == 0)
  { // now fix terminator problem:
    vec3 tmpu = x - v0, tmpv = x - v1, tmpw = x - v2;
    float dotu = min(0.0, dot(tmpu, n0));
    float dotv = min(0.0, dot(tmpv, n1));
    float dotw = min(0.0, dot(tmpw, n2));
    tmpu -= dotu*n0;
    tmpv -= dotv*n1;
    tmpw -= dotw*n2;
    x += mat3(tmpu, tmpv, tmpw) * b;
  }
}

vec3 colourtex(vec2 st)
{
  if((fract(st.x * 200) < 0.5) ^^ (fract(st.y * 200) < 0.5))
    return vec3(0.3);
  return vec3(0.4);
}

vec3 nee_torch(
    in const vec3 lpos,
    in const vec3 x,
    in const vec3 rgb, // TODO: replace by some material that we can evaluate for directions
    in const vec3 n,
    inout uint seed,
    in ivec2 rp)
{
  rayQueryEXT rq;
  vec3 ws;
  float ldist = distance(lpos, x);
  float ao = 0.0;
  const int samples = 1;
  // for(int i=0;i<samples;i++)
  {
    vec4 rand = xrand(seed, rp);
    ws = normalize(lpos + 2.0*rand.xyz - x);
#if 1
    rayQueryInitializeEXT(rq, rt_accel,
        gl_RayFlagsNoneEXT,
        // gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsOpaqueEXT | gl_RayFlagsSkipClosestHitShaderEXT,
        0xFF, x, 1e-2, ws, ldist-1e-2);
    while(rayQueryProceedEXT(rq))
    {
      if (rayQueryGetIntersectionTypeEXT(rq, false) == gl_RayQueryCandidateIntersectionTriangleEXT)
      {
        int instance_id = rayQueryGetIntersectionInstanceIdEXT(rq, false); // which of our ssbo
        int pi = rayQueryGetIntersectionPrimitiveIndexEXT(rq, false); // primitive inside instance
        vec3 b;
        b.yz = rayQueryGetIntersectionBarycentricsEXT(rq, false);
        b.x = 1.0-b.z-b.y;
        // if(min(b.x,min(b.y,b.z)) < 0.05) rayQueryConfirmIntersectionEXT(rq); // wireframe
        int i = 7*pi;
        uint mat = 0;
        vec2 st;
        if(instance_id == 0)
        {
          mat   = dynssbo.v[i+6]&0xffff;
          vec2 st0 = unpackHalf2x16(dynssbo.v[i+3]);
          vec2 st1 = unpackHalf2x16(dynssbo.v[i+4]);
          vec2 st2 = unpackHalf2x16(dynssbo.v[i+5]);
          st = mat3x2(st0, st1, st2) * b;
        }
        else
        {
          mat   = stcssbo.v[i+6]&0xffff;
          vec2 st0 = unpackHalf2x16(stcssbo.v[i+3]);
          vec2 st1 = unpackHalf2x16(stcssbo.v[i+4]);
          vec2 st2 = unpackHalf2x16(stcssbo.v[i+5]);
          st = mat3x2(st0, st1, st2) * b;
        }
        if(mat == 0xffff) 
        { // sky, nothing behind it, right?
          rayQueryConfirmIntersectionEXT(rq);
        }
        else
        {
          ivec2 tc = ivec2(textureSize(img_tex[nonuniformEXT(mat)], 0)*mod(st, vec2(1.0)));
          tc = clamp(tc, ivec2(0), textureSize(img_tex[nonuniformEXT(mat)], 0)-1);
          vec4 diffcol = texelFetch(img_tex[nonuniformEXT(mat)], tc, 0);
          // if(any(greaterThan(diffcol.rgb, vec3(0.0))) || diffcol.a > 0.666)
          if(diffcol.a > 0.666)
            rayQueryConfirmIntersectionEXT(rq);
        }
      }
    }
    if(rayQueryGetIntersectionTypeEXT(rq, true) != gl_RayQueryCommittedIntersectionNoneEXT) ao ++;
#endif
  }
  // ao += 0.5*(rand.z + rand.w)-0.5; // dither
  ao = clamp(ao/samples, 0.0, 1.0);
  float edf = 100.0*pow(abs(dot(-ws, params.cam_w.xyz)), 10.0);
  return (1.0-ao) * rgb * abs(dot(ws,n)) * edf * vec3(50.0)/(ldist*ldist); // light with falloff
}


vec4 envmap(in vec3 w)
{
  // vec3 sundir = normalize(vec3(1, 1, 1)); // this where the moon is in ad_azad
  vec3 sundir = normalize(vec3(1, -1, 1)); // this comes in more nicely through the windows for debugging
  const float k0 = 4.0, k1 = 30.0, k2 = 4.0;
  vec4 emcol;
  emcol  = vec4(0.50, 0.50, 0.50, 1.0) * /*(k0+1.0)/(2.0*M_PI)*/ pow(0.5*(1.0+dot(sundir, w)), k0);
  emcol += vec4(1.00, 0.70, 0.30, 1.0) * /*(k1+1.0)/(2.0*M_PI)*/ pow(0.5*(1.0+dot(sundir, w)), k1);
  emcol += vec4(0.20, 0.08, 0.02, 1.0) * /*(k2+1.0)/(2.0*M_PI)*/ pow(0.5*(1.0-w.z), k2);
  emcol *= 10.0;
  // multiply with some background texture, if we have.
  // these are e.g. gfx/env/*{rt,bk,lf,ft,up,dn}
  int m = 0;
  if(abs(w.y) > abs(w.x) && abs(w.y) > abs(w.z)) m = 1;
  if(abs(w.z) > abs(w.x) && abs(w.z) > abs(w.y)) m = 2;
  uint side = 0;
  vec2 st;
  if     (m == 0 && w.x > 0) { side = 0; st = 0.5 + 0.5*vec2(-w.y, -w.z) / abs(w.x);} // rt
  else if(m == 0 && w.x < 0) { side = 2; st = 0.5 + 0.5*vec2( w.y, -w.z) / abs(w.x);} // lf
  else if(m == 1 && w.y > 0) { side = 1; st = 0.5 + 0.5*vec2( w.x, -w.z) / abs(w.y);} // bk
  else if(m == 1 && w.y < 0) { side = 3; st = 0.5 + 0.5*vec2(-w.x, -w.z) / abs(w.y);} // ft
  else if(m == 2 && w.z > 0) { side = 4; st = 0.5 + 0.5*vec2(-w.y,  w.x) / abs(w.z);} // up
  else if(m == 2 && w.z < 0) { side = 5; st = 0.5 + 0.5*vec2(-w.y, -w.x) / abs(w.z);} // dn
  side += push.first_skybox;
  ivec2 tc = 
      clamp(ivec2(textureSize(img_tex[nonuniformEXT(side)], 0)*st),
        ivec2(0), textureSize(img_tex[nonuniformEXT(side)], 0)-1);
  vec4 tex = texelFetch(img_tex[nonuniformEXT(side)], tc, 0);
  emcol += tex*tex; // mul "un-gamma"d sky texture
  return emcol;
}

bool cast_ray(rayQueryEXT rq, vec3 x, vec3 w)
{
  rayQueryInitializeEXT(rq, rt_accel, gl_RayFlagsNoneEXT, 0xFF, x, 1e-3, w, 10000.0);
  while(rayQueryProceedEXT(rq))
  {
    if (rayQueryGetIntersectionTypeEXT(rq, false) == gl_RayQueryCandidateIntersectionTriangleEXT)
    {
      int instance_id = rayQueryGetIntersectionInstanceIdEXT(rq, false); // which of our ssbo
      int pi = rayQueryGetIntersectionPrimitiveIndexEXT(rq, false); // primitive inside instance
      vec3 b;
      b.yz = rayQueryGetIntersectionBarycentricsEXT(rq, false);
      b.x = 1.0-b.z-b.y;
      // if(min(b.x,min(b.y,b.z)) < 0.05) rayQueryConfirmIntersectionEXT(rq); // wireframe
      int i = 7*pi;
      uint mat = 0;
      vec2 st;
      if(instance_id == 0)
      {
        mat   = dynssbo.v[i+6]&0xffff;
        vec2 st0 = unpackHalf2x16(dynssbo.v[i+3]);
        vec2 st1 = unpackHalf2x16(dynssbo.v[i+4]);
        vec2 st2 = unpackHalf2x16(dynssbo.v[i+5]);
        st = mat3x2(st0, st1, st2) * b;
      }
      else
      {
        mat   = stcssbo.v[i+6]&0xffff;
        vec2 st0 = unpackHalf2x16(stcssbo.v[i+3]);
        vec2 st1 = unpackHalf2x16(stcssbo.v[i+4]);
        vec2 st2 = unpackHalf2x16(stcssbo.v[i+5]);
        st = mat3x2(st0, st1, st2) * b;
      }
      if(mat == 0xffff) 
      { // sky, nothing behind it, right?
        rayQueryConfirmIntersectionEXT(rq);
      }
      else
      {
        ivec2 tc = ivec2(textureSize(img_tex[nonuniformEXT(mat)], 0)*mod(st, vec2(1.0)));
        tc = clamp(tc, ivec2(0), textureSize(img_tex[nonuniformEXT(mat)], 0)-1);
        vec4 diffcol = texelFetch(img_tex[nonuniformEXT(mat)], tc, 0);
        if(diffcol.a > 0.666) rayQueryConfirmIntersectionEXT(rq);
      }
    }
  }
  return (rayQueryGetIntersectionTypeEXT(rq, true) == gl_RayQueryCommittedIntersectionTriangleEXT);
}

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  // uint seed = 19937 * global.frame;
  // today my bluenoise textures are borken. wtf.
  uint seed = 13370000 * ipos.x + ipos.y * 70000 + global.frame * 19937;
  const ivec2 rp = ivec2(mod(ipos, textureSize(img_blue, 0)));

  vec3 aov = vec3(0.0);
  vec3 acc = vec3(0.0);
  vec3 lpos = vec3(0.0);


  for(int s=0;s<params.spp;s++)
  {
    vec3 primary_bsdf = vec3(1.0);
    vec3 guide_dir;
    float total_dist = 0.0;
    vec4 rand = xrand(seed, rp);
    seed = uint(70000 * rand.x);
    float frame = global.frame;// + 0.5*rand.x; // 180 degree shutter
    vec3 rgb = vec3(1.0);
    vec3 x, w, n; // ray position, direction, hit normal
    vec2 st;      // texture coordinates
    { // camera setup:
      x = params.cam_x.xyz;
      vec3 f = params.cam_w.xyz;
      vec3 up = vec3(0, 0, 1);
      vec3 r = normalize(cross(f, up));
      vec3 t = normalize(cross(f, r)) * float(imageSize(img_out).y)/float(imageSize(img_out).x);

      lpos = x + 1*f + 10*up + 20*r;

      vec2 off = filter_bh_sample(rand.yz);
      vec2 uv = (ipos+off)/imageSize(img_out) - 0.5;
      // vec2 uv = (ipos+0.5)/imageSize(img_out) - 0.5;
      w = normalize(0.45*f + r*uv.x + t*uv.y);
    }
    for(int b=0;b<2;b++) // bounces
    {
      rayQueryEXT rq;
      if(cast_ray(rq, x, w))
      { // ray intersected geometry
        const float t = rayQueryGetIntersectionTEXT(rq, true);
        total_dist += t;
        const float T = exp(-t * 3.);
        rgb *= mix(vec3(0.2, 0.4, 0.9), vec3(1.0), T);
        uint mat = 0, matfb = 0;
        vec3 oldx = x;
        prepare_intersection(rq, w, x, n, st, mat, matfb);
        // if(dot(w, n) > 0) n = -n;
        vec3 du, dv, up = vec3(1,0,0);
        if(abs(n.x) > abs(n.y)) up = vec3(0,1,0);
        du = normalize(cross(up, n));
        dv = normalize(cross(du, n));
        vec4 diffcol, emcol;
        if(mat == 0xffff)
        { // marked as sky
          diffcol = vec4(0.0);
          emcol = envmap(w);
        }
        else
        {
          ivec2 tc = ivec2(textureSize(img_tex[nonuniformEXT(mat)], 0)*mod(st, vec2(1.0)));
          tc = clamp(tc, ivec2(0), textureSize(img_tex[nonuniformEXT(mat)], 0)-1);
          diffcol = texelFetch(img_tex[nonuniformEXT(mat)], tc, 0);
          diffcol *= diffcol; // "un-gamma"
          emcol = matfb > 0 ? texelFetch(img_tex[nonuniformEXT(matfb)], tc, 0) : vec4(0.0);
          emcol *= 1000.0;
        }
        if(b == 0) aov = vec3(-dot(w, n));//diffcol.rgb;// + emcol.rgb;
        if(any(greaterThan(emcol.rgb, vec3(0.0))))
        {
          acc += rgb * emcol.rgb;
          break;
        }
        primary_bsdf = diffcol.rgb;
        rgb *= diffcol.rgb;   // multiply bsdf weight
#if 1 // next event estimation to torch:
        acc += nee_torch(lpos, x, rgb, n, seed, rp);
#endif
        // sample new ray direction
        rand = xrand(seed, rp);
        w = sample_cos(rand.xy);
        w = w.x * du + w.y * dv + w.z * n;
        w = normalize(w);
      }
      else
      { // envmap, never reached for closed quake maps
        acc += envmap(w).rgb;
        // vec3 diffcol = texture(img_tex[0], w.xy).rgb;
        // acc += rgb * diffcol * 1000.0 * vec3(0.2, 0.4, 0.9);
        // if(b == 0) aov = (w+vec3(1.0))/2.0;
        break;
      }
    }
  }
  acc /= params.spp;

  // convert linear rec709 to linear rec2020
  mat3 M = mat3(
      0.62750375, 0.06910828, 0.01639406,
      0.32927542, 0.91951916, 0.08801125,
      0.04330266, 0.0113596 , 0.89538035);
  acc = M * acc;

  imageStore(img_out, ipos, vec4(10*acc, 1));
  imageStore(img_aov, ipos, vec4(aov, 1));
}

