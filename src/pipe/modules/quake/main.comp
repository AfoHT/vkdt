#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable
#extension GL_EXT_ray_tracing             : enable
#extension GL_EXT_ray_query               : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 0) uniform global_t
{ 
  int frame;
} global;

layout(std140, set = 0, binding = 1) uniform params_t
{ 
  vec4 cam_x;
  vec4 cam_w;
  int spp;
  int torch;
  int water;
} params;

layout(push_constant, std140) uniform push_t
{
  uint first_skybox;
} push;

layout(set = 1, binding = 0) uniform writeonly image2D img_irradiance;

// TODO: make this an array (and support more instances for decals etc)
layout(std430, set = 1, binding = 1) buffer sssbo_t
{
  uint v[]; // extra geo info for static geo
} stcssbo;

layout(std430, set = 1, binding = 2) buffer dssbo_t
{
  uint v[]; // extra geo info for dynamic geo
} dynssbo;

layout(set = 1, binding = 3) uniform sampler2D img_tex[];
layout(set = 1, binding = 4) uniform sampler2D img_blue;

layout(set = 1, binding = 5) uniform writeonly image2D img_albedo;

layout(set = 1, binding = 6) uniform highp usampler2D img_nee_in;
layout(set = 1, binding = 7, rgba32ui) uniform highp writeonly uimage2D img_nee_out;
layout(set = 1, binding = 8) uniform sampler2D img_mv;

layout(set = 2, binding = 0) uniform accelerationStructureEXT rt_accel;

layout(set = 2, binding = 1) buffer buf_vtx_t
{ // 3x float vertex data for every instance
  float v[];
} buf_vtx[];

layout(set = 2, binding = 2) buffer buf_idx_t
{ // index data for every instance
  uint i[];
} buf_idx[];


#define M_PI   3.14159265358979323846
// importance sample the blackman harris pixel filter.
// has 1.5px radius support
vec2 filter_bh_sample(vec2 rand)
{
  vec2 res = vec2(cos(rand.y*M_PI*2.0), sin(rand.y*M_PI*2.0));
  float r = 0.943404 * asin(0.636617 * asin(sqrt(rand.x))); // surprisingly good fit to inverse cdf
  return res * r;
}

vec3 envmap(in vec3 w)
{
  // vec3 sundir = normalize(vec3(1, 1, 1)); // this where the moon is in ad_azad
  vec3 sundir = normalize(vec3(1, -1, 1)); // this comes in more nicely through the windows for debugging
  const float k0 = 4.0, k1 = 30.0, k2 = 4.0;
  vec3 emcol;
  emcol  = vec3(0.50, 0.50, 0.50) * /*(k0+1.0)/(2.0*M_PI)*/ pow(0.5*(1.0+dot(sundir, w)), k0);
  emcol += vec3(1.00, 0.70, 0.30) * /*(k1+1.0)/(2.0*M_PI)*/ pow(0.5*(1.0+dot(sundir, w)), k1);
  emcol += vec3(0.20, 0.08, 0.02) * /*(k2+1.0)/(2.0*M_PI)*/ pow(0.5*(1.0-w.z), k2);
  // emcol *= 2.0;
  // multiply with some background texture, if we have.
  // these are e.g. gfx/env/*{rt,bk,lf,ft,up,dn}
  int m = 0;
  if(abs(w.y) > abs(w.x) && abs(w.y) > abs(w.z)) m = 1;
  if(abs(w.z) > abs(w.x) && abs(w.z) > abs(w.y)) m = 2;
  uint side = 0;
  vec2 st;
  if     (m == 0 && w.x > 0) { side = 0; st = 0.5 + 0.5*vec2(-w.y, -w.z) / abs(w.x);} // rt
  else if(m == 0 && w.x < 0) { side = 2; st = 0.5 + 0.5*vec2( w.y, -w.z) / abs(w.x);} // lf
  else if(m == 1 && w.y > 0) { side = 1; st = 0.5 + 0.5*vec2( w.x, -w.z) / abs(w.y);} // bk
  else if(m == 1 && w.y < 0) { side = 3; st = 0.5 + 0.5*vec2(-w.x, -w.z) / abs(w.y);} // ft
  else if(m == 2 && w.z > 0) { side = 4; st = 0.5 + 0.5*vec2(-w.y,  w.x) / abs(w.z);} // up
  else if(m == 2 && w.z < 0) { side = 5; st = 0.5 + 0.5*vec2(-w.y, -w.x) / abs(w.z);} // dn
  side += push.first_skybox;
  ivec2 tc = 
      clamp(ivec2(textureSize(img_tex[nonuniformEXT(side)], 0)*st),
        ivec2(0), textureSize(img_tex[nonuniformEXT(side)], 0)-1);
  vec3 tex = texelFetch(img_tex[nonuniformEXT(side)], tc, 0).rgb;
  emcol += tex*tex; // mul "un-gamma"d sky texture
  return 0.2*emcol;
}

#if 1 // TODO: put stuff like this in montecarlo.glsl or so

// sample hemisphere, cos lobe, p = cos(theta)/pi
vec3 sample_cos(vec2 x)
{
  float su = sqrt(x.x);
  return vec3(su*cos(2.0*3.1415*x.y), su*sin(2.0*3.1415*x.y), sqrt(1.0 - x.x));
}

float mrand(inout uint seed)
{ // Algorithm "xor" from p. 4 of Marsaglia, "Xorshift RNGs"
  seed ^= seed << 13;
  seed ^= seed >> 17;
  seed ^= seed << 5;
  return seed / 4294967296.0;
}

vec4 xrand(inout uint seed, ivec2 p)
{
  // cp shift based on seed
  return mod(texelFetch(img_blue, p, 0) + vec4(mrand(seed), mrand(seed), mrand(seed), mrand(seed)), vec4(1.0));
}

#endif

vec2 sign_no0(vec2 v)
{
  return mix(vec2(1.0), vec2(-1.0), lessThan(v, vec2(0.0)));
}
// 32-bit normal encoding from Journal of Computer Graphics Techniques Vol. 3, No. 2, 2014
// A Survey of Efficient Representations for Independent Unit Vectors,
// almost like oct30
vec3 geo_decode_normal(const uint enc)
{
  vec2 projected = unpackSnorm2x16(enc); // -1..1
  vec3 vec = vec3(projected, 1.0-abs(projected.x)-abs(projected.y));
  if(vec.z < 0.0) vec.xy = vec2(1.0-abs(vec.yx)) * sign_no0(vec.xy);
  return normalize(vec);
}
uint geo_encode_normal(vec3 n)
{
  const float invL1Norm = 1.0 / (abs(n.x) + abs(n.y) + abs(n.z));
  vec2 enc; // find floating point values of octahedral map in [-1,1]:
  if(n.z < 0.0) enc = (1.0-abs(n.yx * invL1Norm)) * sign_no0(n.xy);
  else          enc = n.xy * invL1Norm;
  return packSnorm2x16(enc);
}

struct intersection_t
{ // minimal descriptor to id a material_info_t
  int  instid;
  int  primid;
  uint uv;     // unpackHalf2x16
};

struct material_info_t
{ // initialised hit point to work with
  vec3 x;
  vec3 n, du, dv; // shading frame
  vec3 ng;        // geo normal, if different to n
  vec2 st;        // texture coordinates
  uint mat;       // albedo texture
  uint matfb;     // "fullbright" texture/emission
  uint matgl;     // glossy texture, if any
  uint matnd;     // normal/displacement texture, if any
  uint flags;     // none, lava, slime, tele, water
  vec3 albedo;
  vec3 emission;
};

intersection_t
prepare_intersection(
    rayQueryEXT rq)
{
  intersection_t inter;
  inter.instid = rayQueryGetIntersectionInstanceIdEXT(rq, true);     // which of our ssbo
  inter.primid = rayQueryGetIntersectionPrimitiveIndexEXT(rq, true); // primitive inside instance
  inter.uv     = packHalf2x16(rayQueryGetIntersectionBarycentricsEXT(rq, true));
  return inter;
}

material_info_t
prepare_material_info(
    vec3           x,      // incoming ray origin.
    vec3           w,      // incoming ray direction.
    intersection_t inter)  // identify geo intersection
{
  material_info_t m;
  vec3 b;
  b.yz = unpackHalf2x16(inter.uv);
  b.x = 1.0-b.z-b.y;
  int i = 7*inter.primid;
  vec3 n0, n1, n2;
  vec2 st0, st1, st2;
  bool brush_model = false;
  if(inter.instid == 0)
  { // dyn geo
    m.mat   =  dynssbo.v[i+6]&0xffff;
    m.matfb = (dynssbo.v[i+6]>>16) & 0xfff;
    m.flags =  dynssbo.v[i+6]>>28;
    m.matgl = m.matnd = 0;
    brush_model = (dynssbo.v[i+1] == 0xffffffff);
    if(brush_model)
    {
      m.matgl = dynssbo.v[i+0]&0xffff;
      m.matnd = dynssbo.v[i+0]>>16;
    }
    else
    {
      n0 = geo_decode_normal(dynssbo.v[i+0]);
      n1 = geo_decode_normal(dynssbo.v[i+1]);
      n2 = geo_decode_normal(dynssbo.v[i+2]);
    }
    st0 = unpackHalf2x16(dynssbo.v[i+3]);
    st1 = unpackHalf2x16(dynssbo.v[i+4]);
    st2 = unpackHalf2x16(dynssbo.v[i+5]);
    m.st = mat3x2(st0, st1, st2) * b;
  }
  else
  { // static geo
    brush_model = (stcssbo.v[i+1] == 0xffffffff);
    m.mat   =  stcssbo.v[i+6]&0xffff;
    m.matfb = (stcssbo.v[i+6]>>16) & 0xfff;
    m.flags =  stcssbo.v[i+6]>>28;
    if(brush_model)
    {
      m.matgl = stcssbo.v[i+0]&0xffff;
      m.matnd = stcssbo.v[i+0]>>16;
    }
    else
    {
      n0 = geo_decode_normal(stcssbo.v[i+0]);
      n1 = geo_decode_normal(stcssbo.v[i+1]);
      n2 = geo_decode_normal(stcssbo.v[i+2]);
    }
    st0 = unpackHalf2x16(stcssbo.v[i+3]);
    st1 = unpackHalf2x16(stcssbo.v[i+4]);
    st2 = unpackHalf2x16(stcssbo.v[i+5]);
    m.st = mat3x2(st0, st1, st2) * b;
  }
  // more precise intersection point by using vertices + barycentrics
  uint i0 = buf_idx[inter.instid].i[3*inter.primid+0];
  uint i1 = buf_idx[inter.instid].i[3*inter.primid+1];
  uint i2 = buf_idx[inter.instid].i[3*inter.primid+2];
  vec3 v0 = vec3(
      buf_vtx[inter.instid].v[3*i0+0],
      buf_vtx[inter.instid].v[3*i0+1],
      buf_vtx[inter.instid].v[3*i0+2]);
  vec3 v1 = vec3(
      buf_vtx[inter.instid].v[3*i1+0],
      buf_vtx[inter.instid].v[3*i1+1],
      buf_vtx[inter.instid].v[3*i1+2]);
  vec3 v2 = vec3(
      buf_vtx[inter.instid].v[3*i2+0],
      buf_vtx[inter.instid].v[3*i2+1],
      buf_vtx[inter.instid].v[3*i2+2]);
  m.x = mat3(v0, v1, v2) * b;
  m.ng = normalize(cross(v2-v0,v1-v0));
  if(!brush_model)// inter.instid == 0) // only alias models have these normals
  { // now fix shading normals below horizon and terminator problem:
#if 0
    if(dot(w,n0) > 0) n0 -= w*dot(w,n0);
    if(dot(w,n1) > 0) n1 -= w*dot(w,n1);
    if(dot(w,n2) > 0) n2 -= w*dot(w,n2);
    m.n = normalize(mat3(n0, n1, n2) * b);
    vec3 tmpu = m.x - v0, tmpv = m.x - v1, tmpw = m.x - v2;
    float dotu = min(0.0, dot(tmpu, n0));
    float dotv = min(0.0, dot(tmpv, n1));
    float dotw = min(0.0, dot(tmpw, n2));
    tmpu -= dotu*n0;
    tmpv -= dotv*n1;
    tmpw -= dotw*n2;
    m.x += mat3(tmpu, tmpv, tmpw) * b;
#else // XXX FIXME: shading normals are fubared!
    m.n = n0 = n1 = n2 = m.ng;
#endif
  }
  else
  { // brushmodels have no vertex normals
    m.n = n0 = n1 = n2 = m.ng;
  }

  m.albedo   = vec3(0);
  m.emission = vec3(0);
  if(m.mat == 0xffff)
  { // marked as sky
    m.albedo = vec3(0.0);
    m.emission = envmap(w);
    m.n = -w; // sky has no normal
    m.x = x + 10000.0 * w; // sky is far away
  }
  else
  {
    if(m.flags > 0)
    { // all esoteric surfaces warp
      m.st = vec2(
          m.st.x + 0.2*sin(m.st.y*2.0 + global.frame * 0.01),
          m.st.y + 0.2*sin(m.st.x*2.0 + global.frame * 0.01));
    }
    ivec2 tc = ivec2(textureSize(img_tex[nonuniformEXT(m.mat)], 0)*mod(m.st, vec2(1.0)));
    tc = clamp(tc, ivec2(0), textureSize(img_tex[nonuniformEXT(m.mat)], 0)-1);
    m.albedo = texelFetch(img_tex[nonuniformEXT(m.mat)], tc, 0).rgb;
    m.albedo *= m.albedo; // "un-gamma"
    m.emission = m.matfb > 0 ? texelFetch(img_tex[nonuniformEXT(m.matfb)], tc, 0).rgb : vec3(0.0);
    m.emission *= m.emission;
  }
  if     (m.flags == 1) m.emission = 20.0*m.albedo; // lava
  else if(m.flags == 2) m.emission =  5.0*m.albedo; // slime
  else if(m.flags == 3) m.emission =  5.0*m.albedo; // tele
  else m.emission = 100.0*(exp2(m.emission*10.0)-1.0);
  // else m.emission *= 200.0;
#if 1
  if(brush_model && m.matnd > 0)
  { // apply normal map
    ivec2 tc = ivec2(textureSize(img_tex[nonuniformEXT(m.matnd)], 0)*mod(m.st, vec2(1.0)));
    tc = clamp(tc, ivec2(0), textureSize(img_tex[nonuniformEXT(m.matnd)], 0)-1);
    vec3 du = v2 - v0, dv = v1 - v0;
    vec2 duv1 = st2 - st0, duv2 = st1 - st0;
    float det = duv1.x * duv2.y - duv2.x * duv1.y;
    if(abs(det) > 1e-8)
    {
      m.du =  normalize(( duv2.y * du - duv1.y * dv) / det);
      m.dv = -normalize((-duv2.x * du + duv1.x * dv) / det);
    }
    m.n = normalize(mat3(m.du, m.dv, m.n) * ((texelFetch(img_tex[nonuniformEXT(m.matnd)], tc, 0).xyz - vec3(0.5)) * vec3(2)));
    vec3 up = vec3(1,0,0);
    if(abs(m.n.x) > abs(m.n.y)) up = vec3(0,1,0);
    m.du = normalize(cross(up, m.n));
    m.dv = normalize(cross(m.du, m.n));
    if(dot(w,m.n) > 0) m.n -= w*dot(w,m.n);
  }
  else
#endif
  { // init tangent frame
    if(dot(w, m.n) > 0) m.n = -m.n; // never happens except when it does (transparent surfaces/sky)
    vec3 up = vec3(1,0,0);
    if(abs(m.n.x) > abs(m.n.y)) up = vec3(0,1,0);
    m.du = normalize(cross(up, m.n));
    m.dv = normalize(cross(m.du, m.n));
  }
  if(dot(w, m.ng) > 0) m.ng = -m.ng; // never happens except when it does (transparent surfaces/sky)

  return m;
}

vec3 colourtex(vec2 st)
{
  if((fract(st.x * 200) < 0.5) ^^ (fract(st.y * 200) < 0.5))
    return vec3(0.3);
  return vec3(0.4);
}

vec3 nee_torch(
    in const vec3 lpos,
    in const vec3 x,
    in const vec3 rgb, // TODO: replace by some material that we can evaluate for directions
    in const vec3 n,
    inout uint seed,
    in ivec2 rp)
{
  rayQueryEXT rq;
  vec3 ws;
  float ldist = distance(lpos, x);
  float ao = 0.0;
  const int samples = 1;
  // for(int i=0;i<samples;i++)
  {
    vec4 rand = xrand(seed, rp);
    ws = normalize(lpos + 2.0*rand.xyz - x);
#if 1
    rayQueryInitializeEXT(rq, rt_accel,
        gl_RayFlagsNoneEXT,
        // gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsOpaqueEXT | gl_RayFlagsSkipClosestHitShaderEXT,
        0xFF, x, 1e-2, ws, ldist-1e-2);
    while(rayQueryProceedEXT(rq))
    {
      if (rayQueryGetIntersectionTypeEXT(rq, false) == gl_RayQueryCandidateIntersectionTriangleEXT)
      {
        int instance_id = rayQueryGetIntersectionInstanceIdEXT(rq, false); // which of our ssbo
        int pi = rayQueryGetIntersectionPrimitiveIndexEXT(rq, false); // primitive inside instance
        vec3 b;
        b.yz = rayQueryGetIntersectionBarycentricsEXT(rq, false);
        b.x = 1.0-b.z-b.y;
        // if(min(b.x,min(b.y,b.z)) < 0.05) rayQueryConfirmIntersectionEXT(rq); // wireframe
        int i = 7*pi;
        uint mat = 0;
        vec2 st;
        if(instance_id == 0)
        {
          mat   = dynssbo.v[i+6]&0xffff;
          vec2 st0 = unpackHalf2x16(dynssbo.v[i+3]);
          vec2 st1 = unpackHalf2x16(dynssbo.v[i+4]);
          vec2 st2 = unpackHalf2x16(dynssbo.v[i+5]);
          st = mat3x2(st0, st1, st2) * b;
        }
        else
        {
          mat   = stcssbo.v[i+6]&0xffff;
          vec2 st0 = unpackHalf2x16(stcssbo.v[i+3]);
          vec2 st1 = unpackHalf2x16(stcssbo.v[i+4]);
          vec2 st2 = unpackHalf2x16(stcssbo.v[i+5]);
          st = mat3x2(st0, st1, st2) * b;
        }
        if(mat == 0xffff) 
        { // sky, nothing behind it, right?
          rayQueryConfirmIntersectionEXT(rq);
        }
        else
        {
          ivec2 tc = ivec2(textureSize(img_tex[nonuniformEXT(mat)], 0)*mod(st, vec2(1.0)));
          tc = clamp(tc, ivec2(0), textureSize(img_tex[nonuniformEXT(mat)], 0)-1);
          vec4 diffcol = texelFetch(img_tex[nonuniformEXT(mat)], tc, 0);
          // if(any(greaterThan(diffcol.rgb, vec3(0.0))) || diffcol.a > 0.666)
          if(diffcol.a > 0.666)
            rayQueryConfirmIntersectionEXT(rq);
        }
      }
    }
    if(rayQueryGetIntersectionTypeEXT(rq, true) != gl_RayQueryCommittedIntersectionNoneEXT) ao ++;
#endif
  }
  // ao += 0.5*(rand.z + rand.w)-0.5; // dither
  ao = clamp(ao/samples, 0.0, 1.0);
  float edf = 4000.0*pow(abs(dot(-ws, params.cam_w.xyz)), 45.0);
  return (1.0-ao) * rgb * abs(dot(ws,n)) * edf * vec3(0.2, 0.7, 1.0)/(ldist*ldist); // light with falloff
}

bool cast_ray(rayQueryEXT rq, vec3 x, vec3 w, inout vec4 trans)
{
  bool do_trans = trans.x > 0;
  if(do_trans) trans = vec4(1.0);
  rayQueryInitializeEXT(rq, rt_accel, gl_RayFlagsNoneEXT, 0xFF, x, 1e-3, w, 10000.0);
  while(rayQueryProceedEXT(rq))
  {
    if (rayQueryGetIntersectionTypeEXT(rq, false) == gl_RayQueryCandidateIntersectionTriangleEXT)
    {
      int instance_id = rayQueryGetIntersectionInstanceIdEXT(rq, false); // which of our ssbo
      int pi = rayQueryGetIntersectionPrimitiveIndexEXT(rq, false); // primitive inside instance
      vec3 b;
      b.yz = rayQueryGetIntersectionBarycentricsEXT(rq, false);
      b.x = 1.0-b.z-b.y;
      // if(min(b.x,min(b.y,b.z)) < 0.05) rayQueryConfirmIntersectionEXT(rq); // wireframe
      int i = 7*pi;
      uint mat = 0;
      uint flags = 0;
      vec2 st;
      if(instance_id == 0)
      {
        mat   = dynssbo.v[i+6]&0xffff;
        flags = dynssbo.v[i+6]>>28;
        vec2 st0 = unpackHalf2x16(dynssbo.v[i+3]);
        vec2 st1 = unpackHalf2x16(dynssbo.v[i+4]);
        vec2 st2 = unpackHalf2x16(dynssbo.v[i+5]);
        st = mat3x2(st0, st1, st2) * b;
      }
      else
      {
        mat   = stcssbo.v[i+6]&0xffff;
        flags = stcssbo.v[i+6]>>28;
        vec2 st0 = unpackHalf2x16(stcssbo.v[i+3]);
        vec2 st1 = unpackHalf2x16(stcssbo.v[i+4]);
        vec2 st2 = unpackHalf2x16(stcssbo.v[i+5]);
        st = mat3x2(st0, st1, st2) * b;
      }
      if(mat == 0xffff) 
      { // sky, nothing behind it, right?
        rayQueryConfirmIntersectionEXT(rq);
      }
      else
      {
        if(flags > 0) st = vec2(
            st.x + 0.2*sin(st.y*2.0 + global.frame * 0.01),
            st.y + 0.2*sin(st.x*2.0 + global.frame * 0.01));
        ivec2 tc = ivec2(textureSize(img_tex[nonuniformEXT(mat)], 0)*mod(st, vec2(1.0)));
        tc = clamp(tc, ivec2(0), textureSize(img_tex[nonuniformEXT(mat)], 0)-1);
        vec4 diffcol = texelFetch(img_tex[nonuniformEXT(mat)], tc, 0);
        if(do_trans && flags == 4) // only water is transparent, the others shall glow
          trans *= vec4(diffcol.rgb*diffcol.rgb, 0.2);
        else if(diffcol.a > 0.666) rayQueryConfirmIntersectionEXT(rq);
      }
    }
  }
  return (rayQueryGetIntersectionTypeEXT(rq, true) == gl_RayQueryCommittedIntersectionTriangleEXT);
}

struct reservoir_t
{
  vec3  y;              // world space position of light source point
  vec3  n;              // world space light normal
  // XXX remove: (use only w_sum)
  float f;              // observed measurement contribution until there (bsdf * G * Le)
  float kappa;          // concentration parameter for vMF
  // XXX remove:
  // float b;              // mean image brightness for independent MC estimates in this pixel

  float w_sum;          // sum of weights
  uint  M;              // number of samples so far
  // XXX remove:
  float W;              // combined weight
};

reservoir_t reservoir_new()
{
  reservoir_t r;
  r.y = vec3(0);
  r.f =
  r.w_sum = 0.0;
  r.kappa = 300.0; // XXX
  r.M = 0;
  r.W = 0;
  return r;
}

float G_term(vec3 x, vec3 nx, vec3 y, vec3 ny)
{
  vec3 d = y - x;
  float r2 = dot(d, d);
  d = normalize(d);
  return max(0, dot(d, nx))*max(0, dot(-d, ny))/max(1e-6, r2);
}

float ph(reservoir_t r)
{ // return something proportional to sampling probability for this vMF lobe
  return r.w_sum;
}

float
reservoir_W(reservoir_t r)
{
  if(r.M == 0) return 0.0;
  float p = ph(r);
  if(p < 1e-6) return 0.0;
  return r.w_sum / r.M / p;
}

void
reservoir_combine(
    inout reservoir_t r,
    reservoir_t       r2,
    float             rand)
{
  if(r2.f == 0.0) return;
  // if(r.M > 20) return;
  float w = ph(r2)*r2.W*r2.M;
  if(w == 0.0) return;
  // XXX ???
  // r.b = (r.b * r.M + r2.b * r2.M)/(r.M+r2.M); // average mean image brightness no matter what
  w = 1; // XXX DEBUG constant weight/selection in nbhood

  r.w_sum += w;
  r.M     += r2.M;
  r.w_sum = clamp(r.w_sum, 1e-5, 500); // seems necessary to avoid overflow
  r.M     = clamp(r.M, 0, 100);
  if(rand < w / r.w_sum)
  {
    r.y     = r2.y;
    r.f     = r2.f;
    r.kappa = r2.kappa;
    r.W     = reservoir_W(r);
  }
}

// TODO: depend on normal and eval both hemispheres (mirror!)
float vmm_eval(float kappa, float dotmu)
{
  if(kappa < 1e-4) return 1.0/(4.0*M_PI);
  return kappa/(2.0*M_PI*(1.0 - exp(-2.0*kappa))) * exp(kappa*(dotmu-1.0));
}

vec3 vmm_sample(float kappa, vec2 r)
{ // see wenzel's doc on numerically stable expression for vmm:
  float w = 1.0 + log(r.x + (1.0-r.x)*exp(-2.0*kappa))/kappa;
  vec2 v = vec2(sin(2.0*M_PI*r.y), cos(2.0*M_PI*r.y));
  return vec3(sqrt(1.0-w*w)*v, w);
}

float vmm_get_kappa(float x)
{ // compute concentration parameter for given maximum density x
  if(x > 0.795) return 2.0*M_PI*x;
  return max(1e-5, (168.479*x*x + 16.4585*x - 2.39942)/
      (-1.12718*x*x+29.1433*x+1.0));
}

// TODO serialise into uvec4:
// * world space pos    // packHalf2x16 3
// * weight/f/contrib?  // packHalf2x16 1
// * spread (future work)
// * have one uint extra (mean image brightness for independent?)

// 1) pick "mutation strategy" by reservoir sampling in random pixel environment
//    (reserve a spot for uniform sampling)
// 2) sample y by vmm lobe?
// 3) acceptance probability [ f(y) / T(y|x) ] / [ f(x) / T(x|y) ]
// 4) lobe weight: f(z) on accepted sample z

// we need to add the reservoir r2 later with w = phq(r2.y)/phq'(r2.y) * r2.w_sum
// which is equivalent to phq(r.y) * r.M * r.W (and we'll multiply phq on load)
uvec4 reservoir_encode(reservoir_t r)
{
  return uvec4(
      packHalf2x16(r.y.xy),
      packHalf2x16(vec2(r.y.z, r.f)),
      uint(r.kappa),
      geo_encode_normal(r.n));
}

reservoir_t reservoir_decode(uvec4 enc)
{
  reservoir_t r = reservoir_new();
  vec2 h = unpackHalf2x16(enc.y);
  r.y.xy = unpackHalf2x16(enc.x);
  r.y.z  = h.x;
  r.f    = h.y;
  r.kappa = enc.z;
  r.n = geo_decode_normal(enc.w);
  r.M = 1;
  r.w_sum = r.f;
  r.W = 1.0;
  return r;
}

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_irradiance)))) return;

  // uint seed = 19937 * global.frame;
  // today my bluenoise textures are borken. wtf.
  uint seed = 13370000 * ipos.x + ipos.y * 70000 + global.frame * 19937;
  const ivec2 rp = ivec2(mod(ipos, textureSize(img_blue, 0)));

  vec3 alb = vec3(0.0); // albedo
  vec3 irr = vec3(0.0); // estimator for incoming "irradiance", i.e. everything divided by albedo
  const int spp = 8; // needs to be a compile time constant (use specialisation?)
  vec3 rad[spp]; // radiance per sample
  vec3 lco[spp]; // light source coordinates
  vec4 par[spp]; // sampling pdf parameters (mean, kappa)

  reservoir_t res = reservoir_new(); // init zero
  reservoir_t ind = reservoir_new(); // backup of independent reservoir

  vec3 lpos = vec3(0.0); // torch light pos, depending on camera
  intersection_t inter;
  material_info_t m0, m1, me;
  vec4 rand = xrand(seed, rp);
  seed = uint(70000 * rand.x);
  float frame = global.frame;// + 0.5*rand.x; // 180 degree shutter
  vec3 rgb_cam = vec3(1.0);
  vec3 w_cam; // ray direction from camera
  { // camera setup:
    m0.x = params.cam_x.xyz;
    vec3 f = params.cam_w.xyz;
    vec3 up = vec3(0, 0, 1);
    vec3 r = normalize(cross(f, up));
    vec3 t = normalize(cross(f, r)) * float(imageSize(img_irradiance).y)/float(imageSize(img_irradiance).x);

    lpos = m0.x + 1*f + 10*up + 20*r;

    vec2 off = filter_bh_sample(rand.yz);
    vec2 uv = (ipos+off)/imageSize(img_irradiance) - 0.5;
    if(params.water > 0)
      uv = vec2(
          uv.x + 0.05*sin(uv.y*2.0 + global.frame * 0.01),
          uv.y + 0.05*sin(uv.x*2.0 + global.frame * 0.01));
    w_cam = normalize(0.45*f + r*uv.x + t*uv.y);
    m0.n = f;
    m0.x += w_cam * 0.02; // push a bit to avoid problems with some level-end cameras
  }

  rayQueryEXT rq;
  vec4 trans = vec4(0.0);
  if(cast_ray(rq, m0.x, w_cam, trans))
  { // ray intersected geometry, init material state and tangent frame
    intersection_t inter = prepare_intersection(rq);
    m1 = prepare_material_info(m0.x, w_cam, inter);
    // sky is "far" away
    const float t = m1.mat == 0xffff ? 10000.0 : rayQueryGetIntersectionTEXT(rq, true);
    const float T = exp(-t * 3.);
    // TODO: if underwater (params.water) attenuate a bit more
    rgb_cam *= mix(vec3(0.2, 0.4, 0.9), vec3(1.0), T);

    if(any(greaterThan(m1.emission, vec3(0.0))))
    { // have >0 radiance sample on second vertex
      irr = vec3(0.01); // but be sure that albedo * irradiance stays put.
                  // alb += 100 * m1.emission;
      alb = 10.0 * m1.emission; // looks shit either way :|
    }
    else alb = m1.albedo; // directly visible albedo

    me = m1; // store g-buffer-like primary ray result

    if(params.torch == 1) // next event estimation to torch:
      irr += nee_torch(lpos, m1.x, rgb_cam, m1.n, seed, rp);

    // indirect rays, splitting trajectories here
    for(int s=0;s<spp;s++)
    {
      float pdf_w = 1.0;
      float W = 0.0; // not resampled
      m0 = me;       // restore camera point, direction, contribution
      vec3 w = w_cam;
      vec3 rgb = rgb_cam;
      rad[s] = vec3(0.0);
      for(int b=0;b<1;b++) // indirect bounces
      {
        rand = xrand(seed, rp);
        bool use_vmf = s > 0;
        if(res.f == 0) use_vmf = false;
        if(use_vmf)
        {
          w = vmm_sample(res.kappa, rand.xy);
          vec3 mu = normalize(res.y-m0.x);
          vec3 up = vec3(1,0,0), du, dv;
          if(abs(mu.x) > abs(mu.y)) up = vec3(0,1,0);
          du = normalize(cross(up, mu));
          dv = normalize(cross(du, mu));
          w = w.x * du + w.y * dv + w.z * mu;
          pdf_w = vmm_eval(res.kappa, dot(w, mu));
          if(dot(w, m0.n)  <= 0.0) use_vmf = false; // fall back to bsdf if under surface
          W = 1.0;
          rgb *= 1.0/M_PI; // bsdf without albedo
          par[s] = vec4(res.y, res.kappa);
        }
        if(!use_vmf)
        { // sample independent new ray direction
          w = sample_cos(rand.xy);
          w = w.x * m0.du + w.y * m0.dv + w.z * m0.n;
          w = normalize(w); // paranoia/numerical jitter over bounces
          pdf_w = 1.0/M_PI; // uniform projected solid angle
          W = 0.0; // no reweighted sample/bsdf sample
          rgb *= 1.0/M_PI;  // bsdf without albedo
          par[s] = vec4(m0.n, 0.0);
        }

        if(dot(w, m0.ng) <= 0.0) rgb = vec3(0.0); // kill under geo surface paths

        trans = vec4(1.0);
        if(cast_ray(rq, m0.x, w, trans))
        { // ray intersected geometry, init material state and tangent frame
          intersection_t inter = prepare_intersection(rq);
          m1 = prepare_material_info(m0.x, w, inter);
          // sky is "far" away
          const float t = m1.mat == 0xffff ? 10000.0 : rayQueryGetIntersectionTEXT(rq, true);
          const float T = exp(-t * 3.);
          rgb *= mix(vec3(0.2, 0.4, 0.9), vec3(1.0), T);
          rgb = mix(trans.rgb, rgb, trans.w);

          // vertex area measure pdf of x (new vertex)
          const float G = G_term(m0.x, m0.n, m1.x, m1.n);
          const float pdf = pdf_w * G;

          // handle intersection:
          // * accumulate direct albedo and indirect irradiance channels
          // * successful nee sample: store nee state in registers
          if(b == 0 && any(greaterThan(m1.emission, vec3(0.0))))
          { // update nee sampling state
            // metropolis hastings step:
            // update state of this pixel by sampling forward and back pdf:
            float f = length(m1.emission)/pdf_w;
            float a = min(1.0, f * G / (res.f * G_term(m0.x, m0.n, res.y, res.n)));
            rad[s] = rgb * m1.emission; // store for balance heuristic/cmis
            lco[s] = m1.x;
            if(res.f == 0.0 || rand.z < a)
            { // update markov chain state for this pixel:
              res.f = res.w_sum = f;
              res.y = m1.x;      // create new lobe around good sample
              res.n = m1.n;
              res.M++;
              // TODO: pick this wisely. too narrow makes diffuse noise (because MIS goes down)
              res.kappa = 10.0 + 40.0*t;
              if(m1.mat == 0xffff) res.kappa = 10; // sky is smooth
            }
            // if(W==0.0) ind = res;
            if(s==0.0) ind = res;
          }

          m0 = m1; // advance path vertex
        } // end if cast ray intersected anything
        else break; // nothing intersected, can't go on
      } // end bounces

      if(global.frame > 10)
      { // first sample primary hit combines spatiotemporal reservoirs (surroundings of pixel in last frame)
        // sample "mixture model" by selecting lobes from nb pixels.
        // this should be an independent process and only have a fallback to 1/pi projected
        // hemisphere sampling (but can depend on earlier samplings of the pixel env)
        // res = reservoir_new(); // initialise as zero for new sample again
        // to be strictly uniform in nbhood we'll need to reset here (no double accounting if overlapping samples)
        res = ind; // forget other samples but not the independent/newly discovered ones
                   // TODO: insert independent bsdf sample (currently this is f=0 and via rejection)
        vec2 mv = texelFetch(img_mv, ipos, 0).rg;
        const ivec2 off[] = {
          ivec2(-1, -4), ivec2(4, -1), ivec2(1,  4), ivec2(-4, 1),
          ivec2(-2, -1), ivec2(0, -1), ivec2(1, -2),
          ivec2(-1,  0), ivec2(0,  0), ivec2(1,  0),
          ivec2(-1,  2), ivec2(0,  1), ivec2(2,  1)};
        for(int i=0;i<13;i++)
        {
          rand = xrand(seed, rp);
          reservoir_t r2 = reservoir_decode(texelFetch(img_nee_in,
                ivec2(ipos+mv+5*off[i] + (2.0*rand.yz-1.0) * 4.0 + 0.5),
                0));
          reservoir_combine(res, r2, rand.x); // this picks one lobe
        }
      }
    } // end spp for indirect rays
  } // end if intersect primary ray

  // apply cmis:
  for(int s=0;s<spp;s++)
  {
    float pdf = dot(normalize(lco[s] - me.x), par[0].xyz)/M_PI;
    for(int t=1;t<spp;t++)
    {
      if(par[t].w == 0.0)
        pdf += dot(normalize(lco[s] - me.x), par[t].xyz) / M_PI;
      else
        pdf += vmm_eval(par[t].w, dot(normalize(lco[s] - me.x), normalize(par[t].xyz - me.x)));
    }
    if(any(greaterThan(rad[s], vec3(0.0))))
      irr += rad[s] / pdf;
  }

  imageStore(img_nee_out,    ipos, reservoir_encode(res));
  imageStore(img_irradiance, ipos, vec4(irr, 1));
  imageStore(img_albedo,     ipos, vec4(alb, 1));
}

