#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

// global uniform stuff about image and roi
layout(std140, set = 0, binding = 1) uniform params_t
{
  float radius;
  float edges;
  float detail;
} params;

layout( // input f16 buffer rgba
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // input f16 buffer filtered
    set = 1, binding = 1
) uniform sampler2D img_coarse;

layout( // output f16 buffer rgba
    set = 1, binding = 2, rgba16f
) uniform image2D img_out;

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  vec3  rgb = texelFetch(img_in,     ipos, 0).rgb;
  float crs = texelFetch(img_coarse, ipos, 0).r;

  // xyz luma
  float l0 = luminance_rec2020(rgb);
  float l1 = crs;

  float lum = l1 + params.detail * (l0 - l1);
  // colour reconstruction: keep rgb saturation ratio same as before
  rgb *= lum/max(l0, 0.0001);
  // want to see why 8-bit output sucks? try this:
  // float l1 = hermite4(ipos.x / float(params.ro.roi.x));
  // rgba.rgb = vec3(l1);
  imageStore(img_out, ipos, vec4(rgb, 1));
}

