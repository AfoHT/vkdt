#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 1) uniform params_t
{
  float merge_k;
  float merge_n;
  // blur0--3 to follow here but we don't care
} params;

layout(push_constant, std140) uniform push_t
{
  uint scale;
  uint it;
} push;

layout( // distance buffers
    set = 1, binding = 0
) uniform sampler2D img_dist[25];

layout( // coarse offset buffer
    set = 1, binding = 1
) uniform sampler2D img_coff;

layout( // merged offset buffer
    set = 1, binding = 2
) uniform writeonly image2D img_out;

layout( // residual distance
    set = 1, binding = 3
) uniform writeonly image2D img_resid;

float dot9(float a[9], float b[9])
{
  return a[0]*b[0] + a[1]*b[1] + a[2]*b[2] +
         a[3]*b[3] + a[4]*b[4] + a[5]*b[5] +
         a[6]*b[6] + a[7]*b[7] + a[8]*b[8];
}

// merge offset buffers: pick one with smaller distance
void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID.xy);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  // merge all offsets to find minimum distance
  // only one special case: do we have coarse or not (detect using scale):
  vec2 coff = vec2(0);
  if(push.scale > 0)
    coff = sample_soft(img_coff, (ipos+.5f)/vec2(push.scale*textureSize(img_coff, 0))).rg * push.scale;

  vec4 res1 = vec4(0, 0, 6500000, 1);

#if 0 // select largest
  for(int idx=0;idx<25;idx++)
  {
    int offy = idx / 5;
    int offx = idx - offy * 5;
    offx -= 2; offy -= 2;
    // distance comes from a blurd output and we need to upsample it:
    float dist = sample_soft(img_dist[idx], (ipos+.5f)/vec2(imageSize(img_out))).r;
    // float dist = textureLod(img_dist[idx], (ipos+.5f)/vec2(imageSize(img_out)), 0).r;
    vec2 off = coff + vec2(offx, offy);
#if 0
    // it == 0 is finest, it == 3 is coarsest
    if(push.it == 1)
      off = ivec2(offx, offy); // XXX
    else
      off = coff;// + ivec2(offx, offy); // XXX
#endif
    if(dist < res1.z)
      res1 = vec4(off, dist, 1);
  }
#else
  float dist[25];
  int bi = 0;
  for(int i=0;i<25;i++)
    // dist[i] = sample_soft(img_dist[i], (ipos+.5f)/vec2(imageSize(img_out))).r;
    dist[i] = textureLod(img_dist[i], (ipos+.5f)/vec2(imageSize(img_out)), 0).r;
  for(int i=0;i<25;i++)
    if(dist[i] < dist[bi]) bi = i;

  int offy = bi / 5;
  int offx = bi - offy * 5;
  offx -= 2; offy -= 2;

  res1 = vec4(coff + vec2(offx, offy), dist[bi], 1);

  // corner and edge cases don't get interpolated, sorry:
  if((offx > -2 || offx < 2 || offy > -2 || offy < 2) &&
     (push.it <= 1)) // only refine finesh two levels, others not stable enough
  { // internal coordinate, we have a surrounding set of points
    // find sub-pixel minimum by fitting a presumably positive semi definite
    // quadratic polynomial to the 2d field. this follows hasinoff [2016] sec 4
    // in their supplemental material.
#if 1
    // D_sub_2 (eq 14) from the paper, linearised into one vector
    float D_sub_2[9];
    for(int jj=-1;jj<=1;jj++)
      for(int ii=-1;ii<=1;ii++)
        D_sub_2[3*(jj+1)+ii+1] = dist[bi + jj*5+ii];

#if 0 // remove outliers, seems not necessary:
    float mom1 = 0.0f, mom2 = 0.0f;
    for(int i=0;i<9;i++)
    {
      const float c = D_sub_2[i];
      mom1 += c;
      mom2 += c * c;
    }
    mom1 /= 9.;//(2.0 * r + 1) * (2.0 * r + 1);
    mom2 /= 9.;//(2.0 * r + 1) * (2.0 * r + 1);

    const float sigma = sqrt(max(0.0f, mom2 - mom1 * mom1));
    const float thresh = 1.;
    for(int i=0;i<9;i++)
      // if(D_sub_2[i] < mom1 - thresh * sigma ||
      //    D_sub_2[i] > mom1 + thresh * sigma)
      //   D_sub_2[i] = mom1;
      D_sub_2[i] = clamp(D_sub_2[i], mom1 - thresh * sigma, mom1 + thresh * sigma);
#endif

#else // XXX DEBUG
    float D_sub_2[9] = float[](
    8, 4, 4,
    8, 4, 0,
    8, 4, 4);
    // top in this matrix: green => larger mu.y => smaller offy
    // bottom: magenta
    // right: blue smaller mu.y => larger offx
    // left purple: larger mu.x => smaller offx
#endif

    // filter banks:
    const float F_A11[] = float[](
      1/4.0, -2/4.0, 1/4.0,
      2/4.0, -4/4.0, 2/4.0,
      1/4.0, -2/4.0, 1/4.0
    );
    const float F_A22[] = float[](
       1/4.0,  2/4.0,  1/4.0,
      -2/4.0, -4/4.0, -2/4.0,
       1/4.0,  2/4.0,  1/4.0
    );
    const float F_A12[] = float[](
      -1/4.0, 0, 1/4.0,
      -2/4.0, 0, 2/4.0,
      -1/4.0, 0, 1/4.0
    );
    const float F_b1[] = float[](
      -1/8.0, 0, 1/8.0,
      -2/8.0, 0, 2/8.0,
      -1/8.0, 0, 1/8.0
    );
    const float F_b2[] = float[](
      -1/8.0, -2/8.0, -1/8.0,
       0/8.0,  0/8.0,  0/8.0,
       1/8.0,  2/8.0,  1/8.0
    );
    // unused because c irrelevant for us
    // const float F_c[] = float[](
    //   -1/16.0,  2/16.0, -1/16.0,
    //    2/16.0, 12/16.0,  2/16.0,
    //   -1/16.0,  2/16.0, -1/16.0
    // );

    float A[] = float[](
      dot9(F_A11, D_sub_2), dot9(F_A12, D_sub_2), 
      dot9(F_A12, D_sub_2), dot9(F_A22, D_sub_2));
    const float b[] = float[](
      dot9(F_b1, D_sub_2),
      dot9(F_b2, D_sub_2));
    // unused because we just need the min
    // const float c = dot9(F_c, D_sub_2);
    // make A positive semi definite if it's not yet:
    A[0] = max(0.0f, A[0]);
    A[3] = max(0.0f, A[3]);
    float detA = A[0] * A[3] - A[1]*A[2];
    if(detA < 0.0f) A[1] = A[2] = 0.0f;

    // now transform the 1/2xAx + bx + c form to
    // 1/2(x-mu) A (x-mu) + s
    // because we want to know mu.

    // mu = - A^-1 b
    //  s = c - muAmu/2

    detA = A[0] * A[3] - A[1]*A[2];
    if(abs(detA) > 1e-9)
    {
      vec2 mu = vec2(
          (A[3] * b[0] - A[1]*b[1])/detA,
          (A[0] * b[1] - A[2]*b[0])/detA);
      res1.xy -= clamp(mu, vec2(-1), vec2(1));
    }
    // TODO: also interpolate dist? not sure we really need it though
  }
#endif

  imageStore(img_out, ipos, res1);
  // res.z *= 0.2;
  // float len = length(res.xy);
  // if(res.z < 0.13) res.z = 0;
  // if(res.z > 0.13) res.z = 0;
  // if(len > 10.00) res.z = 0;
  // res.z = clamp(100*res.z, 0.0, 1.0);     // mtest
  // res1.z = clamp(10*res1.z, 0.0, 1.0);       // himalaya
  // res1.z = clamp(params.merge_k*res1.z - params.merge_n, 0.0, 1.0);
  res1.z = max(params.merge_k*res1.z - params.merge_n, 0.0);
  res1.z = res1.z/(1.0+res1.z); // fade out smoothly
  // res.z = clamp(50*res.z-0.2, 0.0, 1.0);  // spheres
  // res1.z = 0;
  // res.z = clamp(5*res.z, 0.0, 1.0);       // anti aliasing on ocean
  // res.z = pow(res.z, 5)+0.01;
  // res.z *= len;
  // res.z += 0.01*len;
  imageStore(img_resid, ipos, vec4(res1.z));
}

