#version 460
#extension GL_GOOGLE_include_directive    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 1) uniform params_t
{
  vec4  mul;               // camera white balance (r,g,b, exposure)
  mat3  cam_to_rec2020;    // camera matrix
  uvec4 N;                 // number of patches < 20
  vec4  coef[22];          // xy RBF positions, zw coefs
  float temp;              // colour temperature for wb 0:2856 1:6500
  uint  colour_mode;       // 0-matrix 1-clut
} params;

layout(push_constant, std140) uniform push_t
{
  int have_clut;
} push;


layout( // input
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // output
    set = 1, binding = 1
) uniform writeonly image2D img_out;

layout( // if have_clut, the colour lookup table is here
    set = 1, binding = 2
) uniform sampler2D img_clut;


float
kernel(vec2 ci, vec2 p)
{
  // gaussian kernel
  float r2 = .99 * dot(ci-p, ci-p) + 1e-3;
  // return exp(-0.5*r2/0.0025);
  // return exp(-0.5*r2/0.002);
  // thinplate spline kernel
  return r2 * log(r2);
}

void tri2quad(inout vec2 tc)
{
  tc.y = tc.y / (1.0-tc.x);
  tc.x = (1.0-tc.x)*(1.0-tc.x);
}

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  vec3 rgb = texelFetch(img_in, ipos, 0).rgb;

  if(params.colour_mode == 0 || push.have_clut == 0)
  { // matrix + wb
    rgb *= params.mul.rgb; 
    rgb  = params.cam_to_rec2020 * rgb;
  }
  else
  { // clut
    float b = rgb.r+rgb.g+rgb.b;
    vec2 tc = rgb.rb/b;
    tri2quad(tc);
    vec4 rbrb = texture(img_clut, tc);
    vec2 rb = mix(rbrb.xy, rbrb.zw, params.temp);
    rgb = vec3(rb.x, 1.0-rb.x-rb.y, rb.y);
    rgb *= b / dot(rgb, vec3(1));

    rgb *= params.mul.rgb; // post-mul whitebalance correction
  }

  rgb *= params.mul.w; // exposure correction

  if(params.N.x > 0)
  {
    const float b = dot(rgb, vec3(1));
    rgb /= b;
#if 1 // plain rb
    vec2 ci = rgb.xz;
#else // log(g/r) log(g/b)
    vec2 ci = log(rgb.g/(1e-8+rgb.rb));
#endif
    // now rbf part:
    vec2 co = mat2(params.coef[params.N.x+0].zw, params.coef[params.N.x+1].zw) * ci;
    for(int i=0;i<params.N.x;i++)
      co += params.coef[i].zw * kernel(ci, params.coef[i].xy);

#if 1 // plain rb
    rgb.xz = co;
    rgb.y = 1.0 - rgb.x - rgb.z;
#else // log
    rgb.xz = rgb.y/exp(co)-1e-8;
    rgb /= dot(rgb, vec3(1));
#endif
    rgb *= b; // keep brightness constant
  }

  imageStore(img_out, ipos, vec4(rgb, 1));
}

