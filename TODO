# cleanup

* committed_params no malloc() but use pool on graph! (contract to just set param_size and the rest is done in core?)
* use vkCmdClearColorImage() on output images to avoid inefficiencies on GPU
  while at it: using an incorrect src layout may lead to discarding the data during layout transform barriers
* gui/render.cpp: use descriptor set of output image ("display" node "main" inst)
* connectors propagate format from sink by one step: is just encoding
  i.e. detect 8-bit vs floating point input buffers and create nodes accordingly?
  connect(): downgrade f16 output to ui8 on the fly (etc)

# pipeline features

* support forks: init stack of graph traversal with all output nodes, not just the one

# pipeline reuse

* debug/make sure runflags make sense/include all deps

# gui

* detect non-display output
* dt-style sliders (which look good and have more precision)
* support masking/post expose drawings
* wire graph->runflags in a meaningful way!

# cli

* take cmd line argument which output display node names to process
* replace display node by export + maybe 8-bit downsample node

# params and history

* global buffer of commands (not only params)
* version modules! (for params)
* committed_params to use pool, too!
* commit_params needs nodeid?
* write sidecar file and enable to run without -g but use default sidecar instead

# module api

* pass struct with pointers to core so we don't need to re-link
* module to have two connectors:
  - main connection used for graph traversal, shared with node
  - context buffer connection

# modules

* estimate noise from raw (black area + one sample)
* burst mode demosaic/denoise
* clut with linear part: colour matrix
* simple denoising with decimated fisz wavelets

# build

* modules/api.h to include all graph_t module_t node_t connector_t structs so
  recompilation triggers correctly
